<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WS的小屋</title>
  
  <subtitle>It is never too old to learn.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wsuo.top/"/>
  <updated>2020-02-09T06:32:19.912Z</updated>
  <id>http://wsuo.top/</id>
  
  <author>
    <name>wsuo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何科学上网</title>
    <link href="http://wsuo.top/posts/29590"/>
    <id>http://wsuo.top/posts/29590</id>
    <published>2020-02-09T05:42:51.000Z</published>
    <updated>2020-02-09T06:32:19.912Z</updated>
    
    <content type="html"><![CDATA[<h3 id="经过我的不懈努力，终于找到一个白嫖的方法实现科学上网了。"><a href="#经过我的不懈努力，终于找到一个白嫖的方法实现科学上网了。" class="headerlink" title="经过我的不懈努力，终于找到一个白嫖的方法实现科学上网了。"></a>经过我的不懈努力，终于找到一个白嫖的方法实现科学上网了。</h3><p>废话不多说，开始介绍：</p><p>我这几天逛某hub的时候很卡，卡到头痛（GitHub），于是想挂个VPN，于是用Google搜一下，没错我一直都有个梯子，不过特别慢。搜出了许多，折腾了半天，大部分都要钱，不要钱的还要海外的银行卡号，要钱的还很贵，一个月60大洋，在天朝习惯了白嫖的我怎么可能给他这个钱。</p><p><strong>于是，就有了下文：</strong></p><ul><li>先上链接：</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/glados-network/</span>GLaDOS</span><br></pre></td></tr></table></figure><ul><li>但是，注册这个账户必须要有邀请码，不过我可以给你：</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">H<span class="number">5</span>OJT-FD<span class="name">M1</span>R-IUZW<span class="number">3</span>-<span class="meta">O2</span>HE<span class="symbol">N</span></span><br></pre></td></tr></table></figure><p>不然是没有办法激活的。</p><p><img src="https://s2.ax1x.com/2020/02/09/1f6lpn.png" alt="1f6lpn.png"></p><p>如图，虽然网页看起来很复杂，但是你都不用管，只需要点击window下载就好了，Mac的点Mac下载。</p><p><img src="https://s2.ax1x.com/2020/02/09/1f6KYj.png" alt="1f6KYj.png"></p><hr><p>然后下载好勾选上 system proxy 模式：</p><p><img src="https://s2.ax1x.com/2020/02/09/1f6Mfs.png" alt="1f6Mfs.png"></p><hr><p>然后把他给你的URL复制到制定位置：</p><p><img src="https://s2.ax1x.com/2020/02/09/1f6atJ.png" alt="1f6atJ.png"><br>URL：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//g</span>lados-subscribe.com<span class="regexp">/clash/</span><span class="number">30512</span><span class="regexp">/e51fdd0/</span><span class="number">35484</span><span class="regexp">/glados.yaml</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/09/1f6360.png" alt="1f6360.png"></p><p>然后就大工告成了！</p><blockquote><p>我下载了window和安卓的客户端试了一下，油管的1080不卡，太爽了。。。</p><p>好了，下面的你们自己去探索吧。</p></blockquote><p>有问题在下方留言鸭</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;经过我的不懈努力，终于找到一个白嫖的方法实现科学上网了。&quot;&gt;&lt;a href=&quot;#经过我的不懈努力，终于找到一个白嫖的方法实现科学上网了。&quot; class=&quot;headerlink&quot; title=&quot;经过我的不懈努力，终于找到一个白嫖的方法实现科学上网了。&quot;&gt;&lt;/a&gt;经过
      
    
    </summary>
    
    
      <category term="其他" scheme="http://wsuo.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Git简要教程</title>
    <link href="http://wsuo.top/posts/37271"/>
    <id>http://wsuo.top/posts/37271</id>
    <published>2020-02-08T00:57:02.534Z</published>
    <updated>2020-02-08T01:16:31.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-简要教程"><a href="#Git-简要教程" class="headerlink" title="Git 简要教程"></a>Git 简要教程</h1><p>##引言</p><p>鉴于使用Git有一点点门槛（比SVN稍微高一点），我写了个实用教程，如果想更进一步了解Git，或者觉得我写的太懶，推荐参考书 <a href="http://git-scm.com/book/zh" target="_blank" rel="noopener">Progit</a>，这本书是开源的，前四章就足够用了。</p><p>至于为什么要使用版本控制，主要是为了方便团队合作以及代码管理，并且每个人都可以知道其他人在某一段时间对代码做出了怎样的修改，这个对于Debug非常重要，另外，也能方便地进行代码质量控制，写的难看的代码是会被别人看到并吐槽的…… ( git 有一个 git blame，可以知道任意一行代码是谁写的 - - )</p><h2 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h2><p>官网下载，然后安装，完。</p><hr><h2 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h2><pre><code>git config --global user.name &quot;John Doe&quot;  #设置自己的用户名git config --global user.email &quot;john@example.com&quot;  #设置自己的邮件地址</code></pre><p>一般到这里就足够了，我个人还打开了自动色彩的支持，这样做代码对比的时候比较好看些。这些配置最终是写到 ~/.gitconfig 里的</p><h2 id="Git基础操作"><a href="#Git基础操作" class="headerlink" title="Git基础操作"></a>Git基础操作</h2><p>初始化一个仓库: <code>git init</code>， 此后就可以运行各类git命令了</p><p>最常用的几个命令：</p><ol><li><code>git status</code> 查看仓库当前状态</li><li><code>git add some_file</code> 将某个文件加入版本系统，或缓存（后文会具体描述</li><li><code>git commit -m &quot;i did some changes</code> 进行一次提交，Git是本地提交，不要求连网</li><li><code>git push origin master</code> 将本地的master分支推送到origin服务器的master分支</li><li><code>git pull origin master</code> 将服务器上的master分支同步到本地</li></ol><h2 id="Git文件的三状态模型"><a href="#Git文件的三状态模型" class="headerlink" title="Git文件的三状态模型"></a>Git文件的三状态模型</h2><p>Git中的文件有三个状态：</p><ol><li>untracked : Git不会管理这个文件，默认是这个状态</li><li>unstaged: 当对一个被track的文件进行改动后即为此状态，Git默认不会对此状态的文件进行提交</li><li>staged: Git已经缓存这个文件的修改，提交时将永久保存</li></ol><p>三个状态比SVN的两个状态略复杂一些，但是实际应用中灵活性好很多。</p><p>对于一个 unstaged 的文件，使用 <code>git add file</code> 将其转为 staged 态，有一个技巧，就是在提交的时候，使用 <code>git commit -a -m &quot;some ooxx&quot;</code>，Git会自动对unstaged的文件执行add操作。</p><h2 id="一个简单的开发流程"><a href="#一个简单的开发流程" class="headerlink" title="一个简单的开发流程"></a>一个简单的开发流程</h2><p>以组内的TinyOS代码开发为例</p><ol><li><code>git clone git@git.thunics.org:tinyos.git</code> 这一步将服务器上的仓库 clone 下来</li><li><code>cd tinyos</code></li><li>写代码，测试，调试，写代码，写代码，终于写完了</li><li>如果写代码过程中有新建文件，则使用 <code>git add file</code> 让git去track它，否则/然后 <code>git commit -a -m &quot;我写了一些代码&quot;</code> 提交即可</li><li>如果还要写代码，则返回前两步，否则将代码同步到服务器</li><li><code>git pull origin master</code> 在推送之前先看看别人有没有提交代码，同步下来，这是个好习惯</li><li><code>git push origin master</code> OK，就这么简单。</li></ol><p>需要明确注意的一点是在 pull 的时候，别人写的代码可能跟自己的会有冲突，git会把双方的代码 都放在一个文件里，并警报，这时 <strong>一定要打开文件去手动解决冲突</strong> ！冲突解决完了再提交一次，然后push。</p><h2 id="一个更规范的开发流程"><a href="#一个更规范的开发流程" class="headerlink" title="一个更规范的开发流程"></a>一个更规范的开发流程</h2><p>上一节讲到的开发流程是都在 master 分支下进行的，这个不是很利于代码的维护以及仓库的整洁（虽然他是可行的），一个更好的方式是，本地有 master 和 dev 两个分支，每次都在 dev 分支下修改和提交，在master分支合并dev的修改并推送到服务器。所以开发流程修改为：</p><ol><li><code>git clone git@git.thunics.org:tinyos.git</code> 这一步将服务器上的仓库 clone 下来</li><li><code>cd tinyos</code></li><li><code>git branch dev</code> 新建dev分支，一次即可</li><li><code>git checkout dev</code> 切换到dev分支</li><li>写代码，测试，调试，写代码，写代码，终于写完了</li><li>如果写代码过程中有新建文件，则使用 <code>git add file</code> 让git去track它，否则/然后 <code>git commit -a -m &quot;我写了一些代码&quot;</code> 提交即可</li><li>如果还要写代码，则返回前两步，进行下一步</li><li><code>git checkout master</code> 切换回master分支</li><li><code>git pull origin master</code> 同步其他人的代码，可能处理冲突</li><li><code>git merge dev</code> 将自己的修改合并进来，可能需要处理冲突</li><li><code>git push origin master</code></li></ol><p>这样一次开发就完成了，下次还要回dev分支，就 <code>git checkout dev</code> ，并且 <code>git merge master</code>，将其他人的代码合并进来，这里一般不会有冲突 //因为之前已经处理过一次。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>得益于活跃的社区，Git 有一大票参考资料，而且几乎都有中文版，在此推荐：</p><ol><li><strong>Pro Git</strong>: 楼主的入门教材，Git社区官方推荐的开源书籍，官网喜迎十八大中，pdf放在了 samba的 <em>Documents/WSN小组资料</em> 中</li><li><strong>Git Magic</strong>: <a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="noopener">链接</a> Yet Another 经典教程</li><li><a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="noopener">阮一峰: Git分支管理策略</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git-简要教程&quot;&gt;&lt;a href=&quot;#Git-简要教程&quot; class=&quot;headerlink&quot; title=&quot;Git 简要教程&quot;&gt;&lt;/a&gt;Git 简要教程&lt;/h1&gt;&lt;p&gt;##引言&lt;/p&gt;
&lt;p&gt;鉴于使用Git有一点点门槛（比SVN稍微高一点），我写了个实用教程，
      
    
    </summary>
    
    
      <category term="technology" scheme="http://wsuo.top/categories/technology/"/>
    
    
      <category term="Git" scheme="http://wsuo.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JDK</title>
    <link href="http://wsuo.top/posts/38968"/>
    <id>http://wsuo.top/posts/38968</id>
    <published>2020-02-07T09:20:32.754Z</published>
    <updated>2020-02-08T03:20:51.212Z</updated>
    
    <content type="html"><![CDATA[<p>首先，在官网下载 JDK：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Oracle 官网</a></p><p><img src="https://s2.ax1x.com/2020/02/08/12XD7d.png" alt="12XD7d.png"></p><p>如上图所示，在 Oracle 官网下载 JDK，有一点需要注意，那就是在我们下载合适的 JDK 之前，需要先点击 <strong>标记 1</strong> 所在的按钮，选择接受。否则的话，直接点击 JDK 进行下载的时候，将会弹出如下界面：</p><p><img src="https://s2.ax1x.com/2020/02/08/12X0ne.png" alt="12X0ne.png"></p><p>选择<code>Accept License Agreement</code>之后，再点击 JDK 进行下载就会弹出下载提示框了，如下图所示：</p><p><img src="https://s2.ax1x.com/2020/02/08/12XdXD.png" alt="12XdXD.png"></p><p>下载完成后，双击可执行文件，以博主为例，双击<code>jdk-8u121-windows-x64</code>可执行文件，将会进入 JDK 的安装界面：</p><p><img src="https://s2.ax1x.com/2020/02/08/12Xa6O.png" alt="12Xa6O.png"></p><p>如上图所示，点击“下一步”，进入如下界面：</p><p><img src="https://s2.ax1x.com/2020/02/08/12XU1K.png" alt="12XU1K.png"></p><p>在这里有一点需要注意，那就是 JDK 默认安装在<code>C</code>盘的<code>Program Files</code>目录下，如果需要修改安装路径，则可以点击 <strong>标记 1</strong> 所示的“更改”，一般情况下，选择默认路径就可以，点击“下一步”，进入如下界面：</p><p><img src="https://s2.ax1x.com/2020/02/08/12XsAA.png" alt="12XsAA.png"></p><p>如上图所示，这个界面是安装与 JDK 同版本的 JRE，其实在 JDK 中已经包含 JRE 了，因此这个 JRE 实际上并没有起什么作用，安装也没有什么问题，在这里，我们选择安装，点击“下一步”，进入如下界面：</p><p><img src="https://s2.ax1x.com/2020/02/08/12XytI.png" alt="12XytI.png"></p><p>如上图所示，显示的是 JRE 正在安装中的界面，安装完成后，将会进入如下界面：</p><p><img src="https://s2.ax1x.com/2020/02/08/12Xg9P.png" alt="12Xg9P.png"></p><p>如上图所示，如果有需要的话，点击“后续步骤”，将会访问教程、API 文档和开发人员指南等内容；否则的话，直接点击“关闭”就可以啦！至此，在 Win10 系统下安装 JDK 完成。接下来，配置环境变量，使 JDK 全局生效。首先，找到 JDK 的安装目录，以博主为例，进入这一层 <code>C:\Program Files\Java\jdk1.8.0_121</code>目录，复制以备后用。然后，通过“控制面板”进入“系统”属性，实际上直接选择“此电脑”点击右键选择“属性”即可：</p><p><img src="https://s2.ax1x.com/2020/02/08/12X21f.png" alt="12X21f.png"></p><p>如上图所示，点击“高级系统设置”，进入如下界面：</p><p><img src="https://s2.ax1x.com/2020/02/08/12XRc8.png" alt="12XRc8.png"></p><p>再点击“环境变量”，进入如下界面：</p><p><img src="https://s2.ax1x.com/2020/02/08/12XWjS.png" alt="12XWjS.png"></p><p>在这里，就需要我们特别注意了，选择“系统变量”区域的“新建”功能，点击后，进入如下界面：</p><p><img src="https://s2.ax1x.com/2020/02/08/12Xhng.png" alt="12Xhng.png"></p><p>设置系统变量名为<code>JAVA_HOME</code>，变量值为<code>C:\Program Files\Java\jdk1.8.0_121</code>，点击“确定”，然后打开“系统变量”区域的<code>Path</code>，将这条语句<code>;%JAVA_HOME%\bin</code>追加到<code>Path</code>变量值的最后面，如下图所示：</p><p><img src="https://s2.ax1x.com/2020/02/08/12X4BQ.png" alt="12X4BQ.png"></p><hr><blockquote><p>这里有个非常重要的点一定要注意!!!</p><p>就是变量值最后一个是没有分号的，如果有请一定去掉，可以选择编辑文本去掉分号，完事了之后点确定退出，再重新打开检查一下是不是确认没有分号，如果两次都确认没有分号，就成功了。</p></blockquote><p>这里是最容易出错的地方，初学者往往都是在这里栽跟头。</p><hr><p>至此，环境变量就已经设置完啦！但是空口无凭啊，我们再验证一下，用事实说话。因此，打开“命令行窗口”，输入命令<code>java</code>，结果如下图所示：</p><p><img src="https://s2.ax1x.com/2020/02/08/12X57j.png" alt="12X57j.png"></p><p>再输入命令<code>javac</code>，结果如下图所示：</p><p><img src="https://s2.ax1x.com/2020/02/08/12XoAs.png" alt="12XoAs.png"></p><p>如上图所示的结果，已经可以证明我们的环境变量配置成功啦！不过说实话，我们在<code>C</code>盘验证不是很好，因为配置环境变量就是为了在其它位置（如<code>D</code>盘）也可以运行 JDK，我们都把 JDK 安装到<code>C</code>盘了，再在<code>C</code>盘进行验证就有些取巧了，因为就算环境变量没有配置成功，如果我们进入相应的安装目录下，也是可以运行 JDK 的。因此，我们来一个狠的，直接在<code>D</code>盘的根目录下创建一个<code>.java</code>文件，然后在“命令行窗口”编译并运行，如果这样做还能成功的话，那毫无疑问，环境变量我们肯定配置成功啦！</p><p><img src="https://s2.ax1x.com/2020/02/08/12XTNn.png" alt="12XTNn.png"></p><p>如上图所示，我们先在<code>D</code>盘的根目录下创建一个名为<code>HelloWorld.txt</code>文件，输入以上代码，然后我们再修改文件的后缀<code>.txt</code>为<code>.java</code>即可。最后，在“命令行窗口”输入以下命令：</p><p><img src="https://s2.ax1x.com/2020/02/08/12X7hq.png" alt="12X7hq.png"></p><p>观察运行结果，显然我们的环境变量配置成功啦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先，在官网下载 JDK：&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;
      
    
    </summary>
    
    
      <category term="technology" scheme="http://wsuo.top/categories/technology/"/>
    
    
      <category term="jdk" scheme="http://wsuo.top/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 2020 破解方法</title>
    <link href="http://wsuo.top/posts/51649"/>
    <id>http://wsuo.top/posts/51649</id>
    <published>2020-02-06T00:18:52.167Z</published>
    <updated>2020-02-06T00:29:28.585Z</updated>
    
    <content type="html"><![CDATA[<p>我上传到CSDN审核不通过…可能是天朝又加强版权管制了, 只能上传到自己的博客了.</p><p>﻿### 一、IDEA破解</p><h5 id="1-先上链接："><a href="#1-先上链接：" class="headerlink" title="1. 先上链接："></a>1. 先上链接：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IDEA的官方下载地址</span></span><br><span class="line">https:<span class="comment">//download.jetbrains.com/idea/ideaIU-2019.2.4.exe</span></span><br><span class="line"><span class="comment">//破解包的下载地址</span></span><br><span class="line">https:<span class="comment">//www.lanzous.com/i6ido6h</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/06/1yQFud.png" alt="1yQFud.png"></p><h5 id="2-放的位置"><a href="#2-放的位置" class="headerlink" title="2. 放的位置"></a>2. 放的位置</h5><ul><li><p>将破解包放置某个地方，复制绝对路径，本人还是以前一样放置于安装目录<code>/bin</code>  （地址自己清楚即可个人建议）</p></li><li><p>打开<code>c盘--用户--（对应用户的名字及计算机名字）</code>–找到   <code>.IntelliJIdea2019.2</code>   文件夹  即可</p></li><li><p>打开config</p></li><li><p>编辑   idea64.exe.vmoptions  最后一行添加</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//括号内是你的破解包内的绝对地址填写你自己的</span></span><br><span class="line">-javaagent:【D:\develop\IntelliJ IDEA <span class="number">2019.2</span><span class="number">.4</span>\bin\jetbrains-agent.jar】</span><br></pre></td></tr></table></figure><h5 id="3-打开IDEA"><a href="#3-打开IDEA" class="headerlink" title="3. 打开IDEA"></a>3. 打开IDEA</h5><blockquote><p>和以前的一样了，打开 idea 配置请选择  <code>Activation Cod</code>e 将破解包中 Activation_Code内的码复制到文本框即可<br><img src="https://s2.ax1x.com/2020/02/06/1yQPjH.png" alt="1yQPjH.png"></p></blockquote><h3 id="二、结束"><a href="#二、结束" class="headerlink" title="二、结束"></a>二、结束</h3><p><img src="https://s2.ax1x.com/2020/02/06/1yQCge.png" alt="1yQCge.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如若侵权， 请版主删除谢谢！</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我上传到CSDN审核不通过…可能是天朝又加强版权管制了, 只能上传到自己的博客了.&lt;/p&gt;
&lt;p&gt;﻿### 一、IDEA破解&lt;/p&gt;
&lt;h5 id=&quot;1-先上链接：&quot;&gt;&lt;a href=&quot;#1-先上链接：&quot; class=&quot;headerlink&quot; title=&quot;1. 先上链接：
      
    
    </summary>
    
    
      <category term="其他" scheme="http://wsuo.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="破解" scheme="http://wsuo.top/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>动态规划问题</title>
    <link href="http://wsuo.top/posts/34462"/>
    <id>http://wsuo.top/posts/34462</id>
    <published>2020-02-05T01:14:06.833Z</published>
    <updated>2020-02-05T02:00:23.782Z</updated>
    
    <content type="html"><![CDATA[<p>﻿<code>前言的前言：</code>本篇文章较长，请择需阅读，右边（或左边）有目录，我也根据内容对目录做了详细的划分，本文参考网上各大博客再加上自己的总结，将我认为最有用最容易理解的部分整合到了一起，希望对你有所帮助！</p><hr><p><code>前言：</code>我好像突然<del>对算法感兴趣</del> 了，就好像高中的时候<del>对数学比较难的题目感兴趣</del>   ，果然兴趣很关键，之前对SpringBoot的快速搭建感兴趣研究了很长时间，但我原以为我不会喜欢这种类型的题目，现在却出于好奇心再加上一股倔劲，就是想把它搞明白，于是有了这篇博客。再加上最近在力扣刷题，但是之前从没有接触过算法题，有的看答案都看不懂，后来做的题做多了发现有好多类似的题目，所以我打算总结一下规律。</p><hr><blockquote><ul><li><p>声明：此篇博客为转载已有的文章并总结优化，仅供自己学习记录使用，如有侵权，联系删除，发表到网上也是想到会对大家学习理解动态规划有所帮助。</p></li><li><p>人无完人，设想地球上的每个超棒的想法都能汇聚在相应的小河之中，那么文明的大河将会迅速变成大海（赶在太阳将河水蒸干之前）。感谢互联网，让开源共享精神照耀了这个时代，让这个设想有了真正的可能。</p></li><li><p>如果你想了解更多可以去看文末的参考文章，我觉得他们讲的都特别好，此篇博客也参考了很多他们的内容。</p></li></ul></blockquote><h2 id="一、动态规划的思想"><a href="#一、动态规划的思想" class="headerlink" title="一、动态规划的思想"></a>一、动态规划的思想</h2><p>分享一个故事：</p><blockquote><p>来源：见底部参考文章</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A * <span class="string">"1+1+1+1+1+1+1+1 =？"</span> *</span><br><span class="line"></span><br><span class="line">A : <span class="string">"上面等式的值是多少"</span></span><br><span class="line">B : *计算* <span class="string">"8!"</span></span><br><span class="line"></span><br><span class="line">A : *在上面等式的左边写上 <span class="string">"1+"</span> *</span><br><span class="line">A : <span class="string">"此时等式的值为多少"</span></span><br><span class="line">B : *quickly* <span class="string">"9!"</span></span><br><span class="line">A : <span class="string">"你怎么这么快就知道答案了"</span></span><br><span class="line">A : <span class="string">"只要在8的基础上加1就行了"</span></span><br><span class="line">A : <span class="string">"所以你不用重新计算因为你记住了第一个等式的值为8!动态规划算法也可以说是 '记住求过的解来节省时间'"</span></span><br></pre></td></tr></table></figure><p><strong>动态规划算法的核心就是记住已经解决过的子问题的解。</strong></p><p>动态规划的思想和表达方式都非常简单，求一个问题的解，先得准确的找到该问题所包含的<code>重叠子问题</code>。</p><p>– 什么是重叠子问题？</p><blockquote><p>所谓重叠子问题，就是在求解原问题的解的过程中需要大量重复求解的子问题</p></blockquote><p>求出其重叠子问题的解并将其记录以备再次使用，这样可以大量削减搜索的开销，提高<code>时间复杂度</code>。</p><ul><li>态规划是在尝试了一个问题的每一种可能的解之后，再从中找出最优解。</li><li>动态规划是一种既保证正确性又非常高效的算法。</li></ul><hr><p>动态规划经典类型：(最后面会详细讲解背包问题)</p><ul><li>背包</li><li>树型</li><li>计数动态规划</li></ul><p>求解的方式: （后面有例题）</p><ul><li>a. 自顶向下的备忘录法</li><li>b. 自顶向上</li></ul><p>说了那么多理论,相信大家还是蒙的,好的,下面举栗子。</p><h2 id="二、动态规划的简单应用"><a href="#二、动态规划的简单应用" class="headerlink" title="二、动态规划的简单应用"></a>二、动态规划的简单应用</h2><p>下面是一个<strong>斐波那契数列</strong>的简单实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fib( n-<span class="number">1</span>)+fib(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输入6</span></span><br><span class="line"><span class="comment">//输出：8</span></span><br></pre></td></tr></table></figure><blockquote><p>这段代码很简单吧，其实程序就是这样的，执行效率和编写效率永远是成反比的，更让人头疼的是公司只要执行效率（我管你编写有多难呢），这也是我们学习数据结构的原因（<del>应付面试与考研</del> ）。</p></blockquote><p>算法的执行流程是这样的：<br><img src="https://s2.ax1x.com/2020/02/05/1rKExs.png" alt="1rKExs.png"></p><blockquote><p>但凡遇到需要递归的问题，最好都画出递归树，这对你分析算法的复杂度，寻找算法低效的原因都有巨大帮助。</p></blockquote><p>这个递归树怎么理解？就是说想要计算原问题 f(20)，我就得先计算出子问题 f(19) 和 f(18)，然后要计算 f(19)，我就要先算出子问题 f(18) 和 f(17)，以此类推。最后遇到 f(1) 或者 f(2) 的时候，结果已知，就能直接返回结果，递归树不再向下生长了。</p><hr><p>问：<strong>递归算法的时间复杂度怎么计算？</strong><br>答：<strong>子问题个数乘以解决一个子问题需要的时间。</strong></p><ul><li>子问题个数，即递归树中节点的总数。显然二叉树节点总数为指数级别，所以子问题个数为 O(2^n)。</li><li>解决一个子问题的时间，在本算法中，没有循环，只有 f(n - 1) + f(n - 2) 一个加法操作，时间为 O(1)。</li><li>所以，这个算法的时间复杂度为 O(2^n)，指数级别，爆炸。</li></ul><p>好了，有了栗子，我们看一下该怎么分析，怎么用动态规划处理它：</p><hr><p>我们先用第一种方法解决:</p><h5 id="a-自顶向下的备忘录法"><a href="#a-自顶向下的备忘录法" class="headerlink" title="a. 自顶向下的备忘录法"></a>a. 自顶向下的备忘录法</h5><p>观察递归树，很明显发现了算法低效的原因：存在大量重复计算，比如 f(4) 被计算了两次，而且你可以看到，以 f(4) 为根的这个递归树体量又大，多算一遍，会耗费巨大的时间。更何况，还不止 f(4) 这一个节点被重复计算，所以这个算法及其低效。</p><hr><p>明确了问题，其实就已经把问题解决了一半。即然耗时的原因是重复计算，那么我们可以造一个「备忘录」，每次算出某个子问题的答案后别急着返回，先记到「备忘录」里再返回；每次遇到一个子问题先去「备忘录」里查一查，如果发现之前已经解决过这个问题了，直接把答案拿出来用，不要再耗时去计算了。</p><hr><p>那么问题是怎么判断有没有存过呢？</p><ul><li>先给数组赋初值</li><li>如果循环的时候发现不等于这个初值了，就说明已经存过了</li><li>然后返回这个值，就免去了一次遍历</li></ul><p>这就是备忘录法的大致思想。下面我们用<code>java</code>代码实现以下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//新建一个数组用于存储计算过的值</span></span><br><span class="line">        <span class="keyword">int</span>[] Memo = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始值的判断</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给数组赋初值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            Memo[i] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fib2(n, Memo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib2</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> Memo[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果不等于初值-1了,说明已经计算过了</span></span><br><span class="line">        <span class="keyword">if</span> (Memo[n] != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Memo[n];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            Memo[n] = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Memo[n] = fib2(n-<span class="number">1</span>, Memo) + fib2(n-<span class="number">2</span>, Memo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Memo[n];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>实际上，带「备忘录」的递归算法，把一棵存在巨量冗余的递归树通过「剪枝」，改造成了一幅不存在冗余的递归图，极大减少了子问题（即递归图中节点）的个数。</p></blockquote><p>我们还有一个问题：<br>Q：递归算法的时间复杂度怎么算？<br>A：子问题个数乘以解决一个子问题需要的时间。</p><hr><ul><li>子问题个数，即图中节点的总数，由于本算法不存在冗余计算，子问题就是 <code>f(1), f(2), f(3) ... f(6)</code>，数量和输入规模 n = 6<code>成正</code>比，所以子问题个数为 O(n)。</li><li>解决一个子问题的时间，同上，没有什么循环，时间为 O(1)。</li><li>所以，本算法的时间复杂度是 O(n)。比起暴力算法，是降维打击。</li></ul><blockquote><p>至此，带备忘录的递归解法的效率已经和动态规划一样了。实际上，这种解法和动态规划的思想已经差不多了，只不过这种方法叫做<code>「自顶向下」</code>，动态规划叫做<code>「自底向上」</code>。</p></blockquote><p>那么问题来了：</p><hr><p>啥叫「自顶向下」？</p><p>注意我们刚才画的递归树（或者说图），是从上向下延伸，都是<code>从一个规模较大</code>的原问题比如说 f(6)，<code>向下逐渐分解</code>规模，直到 f(1) 和 f(2) 触底，然后逐层返回答案，这就叫「自顶向下」。</p><p>啥叫「自底向上」？反过来，我们直接从最底下，最简单，问题规模最小的 f(1) 和 f(2) 开始<code>往上推</code>，直到推到我们想要的答案 f(6)，这就是动态规划的思路，这也是为什么动态规划一般都脱离了递归，而是由循环迭代完成计算。</p><h5 id="b-自底向上的动态规划"><a href="#b-自底向上的动态规划" class="headerlink" title="b. 自底向上的动态规划"></a>b. 自底向上的动态规划</h5><p>上面的解法还是用到了递归，计算最大的元素的时候还是要回过头去计算最小的，只是只计算一次了，那为什么不能直接从最小的开始算呢？下面我们就来实现一下自底向上的方法：</p><blockquote><p>这也就是动态规划的核心，先计算子问题，再由子问题计算父问题。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib3</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] Memo = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        Memo[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        Memo[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            Memo[n] = Memo[n-<span class="number">1</span>] + Memo[n-<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Memo[n];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>自底向上方法也是利用数组保存了先计算的值，为后面的调用服务。观察参与循环的只有 <code>i，i-1 , i-2</code>三项，因此该方法的空间可以进一步的压缩如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib4</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> Memo_i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> Memo_i_1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> Memo_i_2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            Memo_i = Memo_i_2 + Memo_i_1;</span><br><span class="line">            Memo_i_2 = Memo_i_1;</span><br><span class="line">            Memo_i_1 = Memo_i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Memo_i;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>一般来说由于备忘录方式的动态规划方法使用了递归，递归的时候会产生额外的开销，使用<code>自底向上</code>的动态规划方法要比备忘录方法好。</li><li>你以为看懂了上面的例子就懂得了动态规划吗？那就too young too simple了。动态规划远远不止如此简单。</li></ul><hr><p>这里再介绍一种自己总结的解决问题很好的方法：</p><h3 id="动态规划的三大步骤"><a href="#动态规划的三大步骤" class="headerlink" title="动态规划的三大步骤"></a>动态规划的三大步骤</h3><h4 id="1、定义数组元素的含义"><a href="#1、定义数组元素的含义" class="headerlink" title="1、定义数组元素的含义"></a>1、定义数组元素的含义</h4><blockquote><p>就是你要求什么。</p></blockquote><ul><li>我们会用一个数组，来保存历史数组，假设用一维数组 dp[] 吧。这个时候有一个非常非常重要的点，就是规定你这个数组元素的含义，例如你的 dp[i] 是代表什么意思？</li></ul><p>这里斐波那契数列元素仅仅代表数字，很容易理解，但有的题目就很难理清楚。</p><h4 id="2、找出数组元素之间的关系式"><a href="#2、找出数组元素之间的关系式" class="headerlink" title="2、找出数组元素之间的关系式"></a>2、找出数组元素之间的关系式</h4><blockquote><p>就是往后退一步，看他是怎么求出来的。</p></blockquote><ul><li>我觉得动态规划，还是有一点类似于我们高中学习时的归纳法的，当我们要计算 <code>dp[n]</code> 时，是可以利用 <code>dp[n-1]，dp[n-2].....dp[1]</code>，来推出 dp[n] 的，也就是可以利用历史数据来推出新的元素值，所以我们要找出数组元素之间的关系式，例如 <code>dp[n] = dp[n-1] + dp[n-2]</code>，这个就是他们的<code>关系式</code>了。而这一步，也是最难的一步。</li></ul><p>这里斐波那契数列的关系式就是<code>dp[n] = dp[n-1] + dp[n-2]</code>;</p><h4 id="3、找出初始值"><a href="#3、找出初始值" class="headerlink" title="3、找出初始值"></a>3、找出初始值</h4><blockquote><p>就是看看那个是不能通过公式求出来的。</p></blockquote><ul><li>学过数学归纳法的都知道，虽然我们知道了数组元素之间的关系式，例如 <code>dp[n] = dp[n-1] + dp[n-2]</code>，我们可以通过 dp[n-1] 和 dp[n-2] 来计算 dp[n]，但是，我们得知道初始值啊，例如一直推下去的话，会由 <code>dp[3] = dp[2] + dp[1]</code>。而 dp[2] 和 dp[1] 是不能再分解的了，所以我们必须要能够直接获得 dp[2] 和 dp[1] 的值，而这，就是所谓的初始值。</li></ul><p>这里斐波那契数列的第一项和第二项也就是<code>dp[0]=0</code>和<code>dp[1]=1</code>是初始值,所有的数据都是基于他们两个得出来的，如果你仔细看那张图你会发现，最底层永远是这两个初始值。</p><hr><p>好了，目前为止我们的引言案例已经介绍完了，带你体验一下动态规划，让你对它感兴趣，下面步入正题：</p><h3 id="案例详解"><a href="#案例详解" class="headerlink" title="案例详解"></a>案例详解</h3><h4 id="1-案例一：简单的一维-DP"><a href="#1-案例一：简单的一维-DP" class="headerlink" title="1. 案例一：简单的一维 DP"></a>1. 案例一：简单的一维 DP</h4><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p></blockquote><p>声明一下：我们这里不做那种特别难的题目，因为没什么意义，我们只是入门而已，如果你对这个算法感兴趣，可以去<a href="https://leetcode-cn.com/u/wsuo/" target="_blank" rel="noopener">Leelcode</a>找一些题目做做。</p><hr><p>好了,看这道题目，耗时根据我们的3步骤来解决这道题目，这道题相较于斐波那契数列抽象了一点，需要我们自己从题目中分析条件：</p><h5 id="1-定义数组元素的含义：你要求什么"><a href="#1-定义数组元素的含义：你要求什么" class="headerlink" title="1.定义数组元素的含义：你要求什么"></a>1.定义数组元素的含义：你要求什么</h5><p>按我上面的步骤说的，首先我们来定义 <code>dp[i]</code> 的含义，我们的问题是要求青蛙跳上 <code>n</code> 级的台阶总共由多少种跳法，那我们就定义 dp[i] 的含义为：<code>跳上一个 i 级的台阶总共有 dp[i] 种跳法</code>。这样，如果我们能够算出 dp[n]，不就是我们要求的答案吗？</p><blockquote><p><code>求什么设什么</code>，好熟悉啊，这也是我们做数学应用题的时候用的方法。</p></blockquote><p>所以第一步定义完成。</p><h5 id="2-找出数组元素之间的关系式：往后退一步"><a href="#2-找出数组元素之间的关系式：往后退一步" class="headerlink" title="2.找出数组元素之间的关系式：往后退一步"></a>2.找出数组元素之间的关系式：往后退一步</h5><p>我们的目的是要求 <code>dp[n]</code>，动态规划的题就是把一个规模比较大的问题分成几个规模比较小的问题，然后由小的问题推导出大的问题。也就是说，dp[n] 的规模为 <code>n</code>，比它规模小的是 <code>n-1, n-2, n-3....</code> 也就是说，dp[n] 一定会和 dp[n-1], dp[n-2]….存在某种关系的。我们要找出他们的关系。</p><p><strong>那么问题来了，怎么找？</strong></p><p>这个是动态规划问题中最为核心也是最难的部分。我们必须<code>回到问题本身</code>来了，来寻找他们的关系式，dp[n] 究竟会等于什么呢？</p><blockquote><p>对于这道题，由于情况可以选择跳一级，也可以选择跳两级，所以青蛙到达第 n 级的台阶有两种方式</p></blockquote><ul><li>一种是从第 n-1 级跳上来</li><li>一种是从第 n-2 级跳上来</li></ul><p>但是我们是要算<code>所有可能的</code>跳法的，所以有 ==dp[n] = dp[n-1] + dp[n-2]==。</p><p><strong>分而治之</strong>！！！体会到了没有，因为dp[n-1]也有两种情况:</p><ul><li>一种是从第 <code>n-1</code>-1 级跳上来</li><li>一种是从第 <code>n-1</code>-2 级跳上来</li></ul><p>是不是又绕回去了?<br>对,这就是<strong>思想的核心</strong>。</p><h5 id="3-找出初始值：找出公式求不出的值"><a href="#3-找出初始值：找出公式求不出的值" class="headerlink" title="3.找出初始值：找出公式求不出的值"></a>3.找出初始值：找出公式求不出的值</h5><p>当 n = 1 时，<code>dp[1] = dp[0] + dp[-1]</code>，而我们是数组是不允许下标为负数的，所以对于 dp[1]，我们必须要<code>直接给出它的数值</code>，相当于初始值，显然，<code>dp[1] = 1</code>。一样，<code>dp[0] = 0</code>.（因为 0 个台阶，那肯定是 0 种跳法了）。于是得出初始值：</p><p><code>dp[0] = 0</code>. <code>dp[1] = 1</code>. </p><p>即 n &lt;= 1 时，dp[n] = n.</p><p>这样对吗？</p><p>我们不妨试一下，将2代进去，当有两个台阶的时候有几种跳法？</p><blockquote><p>两种！ 一种是一次跳一个跳两次，一种是跳两个一步到位。</p></blockquote><p>这么说<code>dp[2]=2</code>;</p><p>但是公式得出的是：dp[2] = dp[0] + dp[1] = 0 + 1 = 1;</p><p>所以在寻找初始值的时候，一<strong>定要注意不要找漏了</strong>，dp[2] 也算是一个初始值，不能通过公式计算得出。</p><ul><li>Q: 有什么办法能避免这种错误吗?</li><li>A: 有，很简单，多做几道题你就会了。</li><li>Q: 。。。。</li></ul><hr><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">    <span class="comment">// 先创建一个数组来保存历史数据</span></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 给出初始值</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 通过关系式来计算出 dp[n]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        dp[i] = dp[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把最终结果返回</span></span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-案例二：二维数组的-DP"><a href="#2-案例二：二维数组的-DP" class="headerlink" title="2. 案例二：二维数组的 DP"></a>2. 案例二：二维数组的 DP</h4><blockquote><p>80% 的题，都是要用二维数组的，所以下面的题主要以二维数组为主。</p></blockquote><ul><li>Q：要用一维还是二维，我怎么知道？</li><li>A：这个问题不大，接着往下看。</li></ul><p><strong>问题描述</strong>：<br>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。<br>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p><p>问总共有多少条不同的路径？<br><img src="https://s2.ax1x.com/2020/02/05/1rKCa8.png" alt="1rKCa8.png"></p><p><img src="https://s2.ax1x.com/2020/02/05/1rK0iD.png" alt="1rK0iD.png"></p><h5 id="1-定义数组元素的含义：你要求什么-1"><a href="#1-定义数组元素的含义：你要求什么-1" class="headerlink" title="1. 定义数组元素的含义：你要求什么"></a>1. 定义数组元素的含义：你要求什么</h5><p>这个应该不难想出来含义应该是<strong>dp[i][j] = 从起点出发到达第<code>i,j</code>位置的路径条数</strong></p><blockquote><p>这个网格相当于一个二维数组，数组是从下标为 0 开始算起的，所以 右下角的位置是 (m-1, n - 1)，所以 <code>dp[m-1] [n-1]</code> 就是我们要找的答案。</p></blockquote><h5 id="2-找出数组元素间的关系式：往后退一步"><a href="#2-找出数组元素间的关系式：往后退一步" class="headerlink" title="2. 找出数组元素间的关系式：往后退一步"></a>2. 找出数组元素间的关系式：往后退一步</h5><p>想象以下，机器人要怎么样才能到达 (i, j) 这个位置？<br><code>从终点往后退一步再看</code>。<br>由于机器人只能向下走或者向右走，所以有两种方式到达</p><ul><li>一种是从 <code>(i-1, j)</code> 这个位置走一步到达</li><li>一种是从 <code>(i, j-1)</code> 这个位置走一步到达</li></ul><p>因为是计算所有可能的步骤，所以是把所有可能走的路径都<code>加起来</code>，所以关系式是 <code>dp[i] [j] = dp[i-1] [j] + dp[i] [j-1]</code>。</p><p>加起来这个字眼很重要，只要有<strong>总的</strong>，<strong>全部</strong>，<strong>和</strong>、这些字眼的题目，我们要立刻想到<strong>加起来</strong>。</p><h5 id="3-找出初始值：公式求不出的值"><a href="#3-找出初始值：公式求不出的值" class="headerlink" title="3. 找出初始值：公式求不出的值"></a>3. 找出初始值：公式求不出的值</h5><p>其实你只要把关系式写出来了，初始值就自然而然的出来了，你只需要看哪个数字是公式<code>求不出来的</code>，或者说那个数字是<code>不能代进去的</code>。</p><p>显然，当 <code>dp[i] [j]</code> 中，如果 i 或者 j 有一个为 0，那么还能使用关系式吗？答是不能的，因为这个时候把 <code>i - 1</code> 或者 <code>j - 1</code>，就变成负数了，数组就会出问题了。所以我们就是要求这个<code>不能用公式求出来的值</code>来作为初始值。</p><p>所以我们的初始值是计算出所有的 <code>dp[0] [0….n-1]</code> 和所有的 <code>dp[0….m-1] [0]</code>。这个还是非常容易计算的，相当于计算图中的<strong>第一行</strong>和<strong>第一列</strong>。</p><p>因此初始值如下：</p><ul><li><code>dp[0] [0….n-1] = 1;</code>        // 相当于最上面一行，机器人只能一直往右走</li><li><code>dp[0…m-1] [0] = 1;</code>      // 相当于最左面一列，机器人只能一直往下走</li></ul><p>好了，现在三个步骤都走完了，是不是<del>很简单</del> 呢？</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m &lt;= <span class="number">0</span> || n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">      dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">      dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 推导出 dp[m-1][n-1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>空间复杂度: <code>O(n*m)</code> </p></blockquote><p>其实算法这种东西，代码不是很重要，重要的是思维。你实现的方式有很多种，但是<code>思维和方法</code>能想到一个就不错了。</p><hr><h4 id="3-案例三：二维数组-DP"><a href="#3-案例三：二维数组-DP" class="headerlink" title="3. 案例三：二维数组 DP"></a>3. 案例三：二维数组 DP</h4><p><img src="https://img-blog.csdnimg.cn/20200204184510783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk0MTM2NA==,size_16,color_FFFFFF,t_70" alt="案例三"><br>摘自<a href="https://leetcode-cn.com/problems/minimum-path-sum/" target="_blank" rel="noopener">Leelcode-64</a>题；</p><h5 id="1-定义数组元素的含义：你要求什么-2"><a href="#1-定义数组元素的含义：你要求什么-2" class="headerlink" title="1. 定义数组元素的含义：你要求什么"></a>1. 定义数组元素的含义：你要求什么</h5><p>由于我们的目的是从左上角到右下角，最小路径和是多少，那我们就定义 dp[i] [j]的含义为：当机器人从左上角走到<code>(i, j)</code> 这个位置时，最小的路径和是 <code>dp[i] [j]</code>。那么，<code>dp[m-1] [n-1]</code> 就是我们要的答案了。</p><blockquote><p>这个网格相当于一个二维数组，数组是从下标为 0 开始算起的，所以 由下角的位置是 <code>(m-1, n - 1)</code>，所以 <code>dp[m-1] [n-1]</code> 就是我们要走的答案。</p></blockquote><h5 id="2-找出数组元素之间的关系式：往后退一步-1"><a href="#2-找出数组元素之间的关系式：往后退一步-1" class="headerlink" title="2. 找出数组元素之间的关系式：往后退一步"></a>2. 找出数组元素之间的关系式：往后退一步</h5><p>往后退一步，要怎么样才能走到 (i, j) 这个位置？有两种方式：</p><ul><li>一种是从 <code>(i-1, j)</code> 这个位置到达</li><li>一种是从<code>(i, j-1)</code> 这个位置到达</li></ul><p>不过这次不是计算所有可能路径，而是计算哪一个<code>路径和是最小的</code>，那么我们要从这两种方式中，选择一种，使得<code>dp[i] [j]</code> 的值是最小的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i] [j] = min(dp[i-<span class="number">1</span>][j]，dp[i][j-<span class="number">1</span>]) + arr[i][j];<span class="comment">// arr[i][j] 表示网格中的值</span></span><br></pre></td></tr></table></figure><h5 id="3-找出初始值：公式求不出的值-1"><a href="#3-找出初始值：公式求不出的值-1" class="headerlink" title="3. 找出初始值：公式求不出的值"></a>3. 找出初始值：公式求不出的值</h5><p>谁求不出？<code>i</code>和<code>j</code>中有一个为零都不行，所以我们的初始值是计算出所有的 <code>dp[0] [0….n-1]</code> 和所有的 <code>dp[0….m-1] [0]</code>。</p><blockquote><p>这里的<code>0….m-1</code>可以换算成<code>1...m</code>，也就是1到<code>i</code>，这里分析出来的<code>dp[0….m-1][0]</code>就是你代码中要<code>代入公式</code><strong>初始化</strong>写在左边的。</p></blockquote><p>因此初始值如下：</p><ul><li><code>dp[0] [j] = arr[0] [j] + dp[0] [j-1];</code> </li><li><code>dp[i] [0] = arr[i] [0] + dp[i-1] [0];</code></li></ul><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span>[][] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = arr.length;</span><br><span class="line">    <span class="keyword">int</span> n = arr[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">if</span> (m &lt;= <span class="number">0</span> || n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n]; <span class="comment">// </span></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = arr[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 初始化最左边的列</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)&#123;</span><br><span class="line">      dp[i][<span class="number">0</span>] = dp[i-<span class="number">1</span>][<span class="number">0</span>] + arr[i][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化最上边的行</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">      dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i-<span class="number">1</span>] + arr[<span class="number">0</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">// 推导出 dp[m-1][n-1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[i][j] = Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]) + arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="4-案例四：编辑距离"><a href="#4-案例四：编辑距离" class="headerlink" title="4. 案例四：编辑距离"></a>4. 案例四：编辑距离</h4><p>来源：<a href="https://leetcode-cn.com/problems/edit-distance/" target="_blank" rel="noopener">Leelcode-72. 编辑距离</a>;</p><p><strong>问题描述：</strong><br>给定两个单词 word1 和 word2，计算出将 word1 转换成 word2 所使用的最少操作数 。</p><p>你可以对一个单词进行如下三种操作：</p><ul><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">输入: word1 = <span class="string">"horse"</span>, word2 = <span class="string">"ros"</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: </span><br><span class="line">horse -&gt; rorse (将 <span class="string">'h'</span> 替换为 <span class="string">'r'</span>)</span><br><span class="line">rorse -&gt; rose (删除 <span class="string">'r'</span>)</span><br><span class="line">rose -&gt; ros (删除 <span class="string">'e'</span>)</span><br></pre></td></tr></table></figure><p><strong>让我们来干掉这一题：</strong></p><blockquote><p>90% 的字符串问题都可以用动态规划解决，并且90%是采用二维数组。</p></blockquote><h5 id="1-定义数组元素的含义：你要求什么-3"><a href="#1-定义数组元素的含义：你要求什么-3" class="headerlink" title="1. 定义数组元素的含义：你要求什么"></a>1. 定义数组元素的含义：你要求什么</h5><p>我们的目的求将 word1 转换成 word2 所使用的最少操作数 。那我们就定义 <code>dp[i] [j]</code>的含义为：<strong>当字符串 word1 的长度为 i，字符串 word2 的长度为 j 时，将 word1 转化为 word2 所使用的最少操作次数为 <code>dp[i] [j]</code>。</strong></p><h5 id="2-找出数组元素之间的关系式：往后退一步-2"><a href="#2-找出数组元素之间的关系式：往后退一步-2" class="headerlink" title="2. 找出数组元素之间的关系式：往后退一步"></a>2. 找出数组元素之间的关系式：往后退一步</h5><p>接下来我们就要找 dp[i] [j] 元素之间的关系了，比起其他题，这道题相对比较难找一点，但是，不管多难找，大部分情况下，<code>dp[i] [j]</code> 和 <code>dp[i-1] [j]</code>、<code>dp[i] [j-1]</code>、<code>dp[i-1] [j-1]</code> 肯定存在某种关系。</p><p>这里先把题目的条件拉过来：</p><ul><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ul><p>还有第一步我们分析的结果：</p><blockquote><p>当字符串 word1 的长度为 <code>i</code>，字符串 word2 的长度为 <code>j</code> 时，将 word1 转化为 word2 所使用的最少操作次数为 <code>dp[i] [j]</code>。</p></blockquote><p>也就是说：</p><ul><li>如果是在<code>字符串</code>word1末尾插入一个与 word2[j] 相等的<code>字符</code>就能使它符合条件,<strong>(注意这里的word1是字符串,word2[j]是字符)</strong>,那么在这个操作之前，word1后面肯定是少一个字母的，所以将 word1 转化为 word2 所使用的最少操作次数应该是将 <code>后面少一个字母的word1</code> 转化为 word2 所使用的最少操作次数再加上本次操作，也就是加1，翻译成代码就是：<code>dp[i] [j] = dp[i-1] [j] + 1</code>；因为i-1代表的是长度嘛；</li><li>如果是在<code>字符串</code>word1末尾删除一个<code>字符</code>就能使它符合条件,那么在这个操作之前，word1后面肯定是多一个字母的，所以将 word1 转化为 word2 所使用的最少操作次数应该是将 <code>后面多一个字母的word1</code> 转化为 word2 所使用的最少操作次数再加上本次操作，也就是加1，翻译成代码就是：<code>dp[i] [j] = dp[i] [j-1] + 1</code>；</li><li>如果把字符 word1[i] 替换成与 word2[j] 相等，意思就是将这两个字符串的最后一个字符交换一下就可以了，那交换之前呢？交换之前的最少操作此时肯定是dp[i-1][j-1]，因为我们忽略了最后一个元素了，所以翻译成代码就是：<code>dp[i] [j] = dp[i-1] [j-1] + 1;</code></li></ul><p>我们应该选择一种操作，使得 dp[i] [j] 的值最小，显然有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i] [j] = min(dp[i-<span class="number">1</span>] [j-<span class="number">1</span>]，dp[i] [j-<span class="number">1</span>]，dp[[i-<span class="number">1</span>] [j]]) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>于是，我们的关系式就推出来了。</p><h5 id="3-找出初始值：公式求不出的值-2"><a href="#3-找出初始值：公式求不出的值-2" class="headerlink" title="3. 找出初始值：公式求不出的值"></a>3. 找出初始值：公式求不出的值</h5><p>看看哪个是公式求不出的，<code>i</code>和<code>j</code>两个都不能等于0,所以求不出的就是他俩有一个等于零的时候，也就是所有的<code>dp[0] [0….n]</code> 和所有的 <code>dp[0….m] [0]</code>；</p><blockquote><p>这里的<code>0….m-1</code>可以换算成<code>1...m</code>，也就是1到<code>i</code>，这里分析出来的<code>dp[0….m-1][0]</code>就是你代码中要<code>代入公式</code><strong>初始化</strong>写在左边的。</p></blockquote><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1 = word1.length();</span><br><span class="line">    <span class="keyword">int</span> n2 = word2.length();</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n1 + <span class="number">1</span>][n2 + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// dp[0][0...n2]的初始值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n2; j++) &#123;</span><br><span class="line">     dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">// dp[0...n1][0] 的初始值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过公式推出 dp[n1][n2]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n2; j++) &#123;</span><br><span class="line">            <span class="comment">// 如果 word1[i] 与 word2[j] 相等。第 i 个字符对应下标是 i-1</span></span><br><span class="line">            <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>))&#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">               dp[i][j] = Math.min(Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], dp[i][j - <span class="number">1</span>]), dp[i - <span class="number">1</span>][j]) + <span class="number">1</span>;</span><br><span class="line">            &#125;         </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n1][n2];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你要练习，可以去 leetcode，选择动态规划专题，然后连续刷几十道，保证你以后再也不怕动态规划了。<del>当然，遇到很难的，咱该挂的还是得挂。</del> </p><p>OKOKOKOKOOKOKOKOKOKOKOKOKOKOKOKOKOKOKOKOKOKOKOK</p><hr><p>到现在为止你已经是一名动态规划初级选手了，要想进阶到中级选手必须<a href="https://wsuo.github.io/" target="_blank" rel="noopener">充钱</a><br>[狗头]。</p><p>开玩笑的，要想进阶必须学习<del>油画</del> ！！！<br>呸，<strong>优化</strong>。</p><h3 id="另一种思路"><a href="#另一种思路" class="headerlink" title="另一种思路"></a>另一种思路</h3><p>好了，我相信这种思路你已经掌握了，我们还有另一种思路解决问题，就是我在前面提到的——两种方法：</p><ul><li>自顶向下的备忘录法</li><li>自底向上的动态规划</li></ul><p>我们前面用到的三大步骤都是：<code>自底向上的动态规划。</code></p><p>你可以用备忘录法自己实现一下，这里就不展开了，留给你自己做。</p><hr><h2 id="三、动态规划的经典模型"><a href="#三、动态规划的经典模型" class="headerlink" title="三、动态规划的经典模型"></a>三、动态规划的经典模型</h2><h3 id="1-线性模型"><a href="#1-线性模型" class="headerlink" title="1. 线性模型"></a>1. 线性模型</h3><p>线性模型的是动态规划中最常用的模型，这里的线性指的是状态的排布是呈线性的。我们常用一维数组解题。具体的概念就不展开了，感兴趣的可以再去Google一下什么是线性模型。</p><h3 id="2-区间模型"><a href="#2-区间模型" class="headerlink" title="2. 区间模型"></a>2. 区间模型</h3><p>区间模型基本就是二维空间模型，我们常用二维数组解题，就像我们前面的案例二到案例四都是<code>区间模型</code></p><blockquote><p>区间模型的状态表示一般为d[i][j]，表示区间[i, j]上的最优解，然后通过状态转移计算出[i+1, j]或者[i,j+1]上的最优解，逐步扩大区间的范围，最终求得[1, len]的最优解。</p></blockquote><h3 id="3-背包模型：（较难，可跳过）"><a href="#3-背包模型：（较难，可跳过）" class="headerlink" title="3. 背包模型：（较难，可跳过）"></a>3. 背包模型：（较难，可跳过）</h3><p>背包问题是动态规划中一个最典型的问题之一。</p><hr><blockquote><p>前两个模型我们都有讲到，但是背包模型还没有提到，那么现在我们对背包模型进行详细的讲解。</p></blockquote><p>我们这里用最简单的例子来解决背包问题：</p><p>这里使用<code>动态转移方程</code>：<br>这里第一次提这个概念，相信你也听到过这个概念，你可能也会感到奇怪为什么文章中自始至终都没有提呢，到最后才说？</p><hr><p>因为我本人不太喜欢用这个词语，不过它的使用我已经体现过了，其实他就是我们求得 <code>数组元素之间的关系式</code> 再加上 <code>初始值</code>，把这两个式子结合起来就是所谓的<code>动态转移方程</code>。</p><p>我觉得吧，关键是理解，他叫什么不重要，你看，我不跟你说什么是动态转移方程也就那么着，你也不会去想他是什么，只要你理解了，无论用什么方法只要能做出来题目，我们的目的也就达到了。</p><hr><p>我们这里直接给出背包的状态转换方程：<br><img src="https://s2.ax1x.com/2020/02/05/1ruzrt.png" alt="1ruzrt.png"></p><ul><li>先确定含义：<code>m[i,W]</code>表示在前i件物品中选择若干件放在承重为 W 的背包中，可以取得的最大价值。</li><li>Vi表示第i件物品的价值。</li><li>决策：为了背包中物品总价值最大化，第 i件物品应该放入背包中吗 ？</li></ul><p><img src="https://s2.ax1x.com/2020/02/05/1rK9Vf.png" alt="1rK9Vf.png"><br><strong>问题描述：</strong><br>假设山洞里共有a,b,c,d ,e这5件宝物（不是5种宝物），它们的重量分别是2,2,6,5,4，它们的价值分别是6,3,5,4,6，现在给你个承重为10的背包, 怎么装背包，可以才能带走最多的财富。</p><hr><p>也就是说有编号分别为a,b,c,d,e的五件物品，它们的重量分别是2,2,6,5,4，它们的价值分别是6,3,5,4,6，现在给你个承重为10的背包，如何让背包里装入的物品具有最大的价值总和？</p><p><img src="https://s2.ax1x.com/2020/02/05/1rKSqP.png" alt="1rKSqP.png"></p><ul><li>只要你能通过找规律手工填写出上面这张表就算理解了01背包的动态规划算法。</li><li>这张表是至底向上，从左到右生成的。</li><li>为了叙述方便，用e2单元格表示e行2列的单元格，这个单元格的意义是用来表示只有物品e时，有个承重为2的背包，那么这个背包的最大价值是0，因为e物品的重量是4，背包装不了。</li><li>对于d2单元格，表示只有物品e，d时,承重为2的背包,所能装入的最大价值，仍然是0，因为物品e,d都不是这个背包能装的。</li><li>同理，c2=0，b2=3,a2=6。</li><li>对于承重为8的背包，a8=15,是怎么得出的呢？</li></ul><p>根据01背包的状态转换方程，需要考察两个值：<br><img src="https://s2.ax1x.com/2020/02/05/1ruxKI.png" alt="1ruxKI.png"><br>一个是：<img src="https://s2.ax1x.com/2020/02/05/1rKFPg.png" alt="1rKFPg.png"></p><p>另一个是：<br><img src="https://s2.ax1x.com/2020/02/05/1rKPIS.png" alt="1rKPIS.png"></p><ul><li><code>m[i-1,W]</code>表示我有一个承重为8的背包，当只有物品b,c,d,e四件可选时，这个背包能装入的最大价值</li><li><code>m[i-1,W-wi]</code>表示我有一个承重为6的背包（等于当前背包承重减去物品a的重量），当只有物品b,c,d,e四件可选时，这个背包能装入的最大价值</li><li><code>m[i-1,W-wi]</code>就是指单元格b6,值为9，<code>vi</code>指的是a物品的价值，即6</li><li>由于<code>m[i-1,W-wi]</code>+<code>vi</code> = 9 + 6 = 15 大于<code>m[i-1,W]</code>= 9，所以物品a应该放入承重为8的背包</li></ul><p>好，就讲到这，代码也不给了，感兴趣的自己可以去查阅相关书籍资料。</p><blockquote><p>背包问题有很多特别难的题目，我们浅尝辄止，毕竟只是入门。</p></blockquote><hr><h2 id="三、动态规划的优化"><a href="#三、动态规划的优化" class="headerlink" title="三、动态规划的优化"></a>三、动态规划的优化</h2><blockquote><p>Q：那我该咋优化呢？<br>A：当然是画图了</p></blockquote><p>没错，<code>80%</code> 的动态规划题都可以画图，其中 <code>80%</code> 的题都可以通过画图一下子知道怎么优化，当然，DP 也有一些很难的题，想优化可没那么容易，不过，今天我要讲的，是属于不怎么难，且最常见，面试笔试最经常考的难度的题。</p><hr><h3 id="优化案例"><a href="#优化案例" class="headerlink" title="优化案例"></a>优化案例</h3><h4 id="1-案例一：最多路径数"><a href="#1-案例一：最多路径数" class="headerlink" title="1. 案例一：最多路径数"></a>1. 案例一：最多路径数</h4><p>也就是第二章节的案例二，如果你懒得翻，好吧，我贴在下面：</p><p>这道题的 dp 转移公式是 <code>dp[i] [j] = dp[i-1] [j] + dp[i] [j-1]</code></p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m &lt;= <span class="number">0</span> || n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">      dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">      dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 推导出 dp[m-1][n-1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们当时是这个亚子实现的，不过他的空间复杂度是<code>O(n * m)</code>，是可以优化的：</p><h5 id="优化案例一"><a href="#优化案例一" class="headerlink" title="优化案例一"></a>优化案例一</h5><p>首先<code>dp[i] [j]</code> 是一个二维矩阵，我们来画个二维矩阵的图，对矩阵进行初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">      dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">      dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>1</th><th>1</th><th>1</th><th>1</th></tr></thead><tbody><tr><td>1</td><td>*</td><td>*</td><td>*</td></tr><tr><td>1</td><td>*</td><td>*</td><td>*</td></tr><tr><td>1</td><td>*</td><td>*</td><td>*</td></tr></tbody></table><p>然后根据公式 <code>dp[i][j] = dp[i-1][j] + dp[i][j-1]</code> 来填充矩阵的其他值。下面我们先填充第二行的值。</p><table><thead><tr><th>1</th><th>1</th><th>1</th><th>1</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>1</td><td>*</td><td>*</td><td>*</td></tr><tr><td>1</td><td>*</td><td>*</td><td>*</td></tr></tbody></table><blockquote><p>当我们要填充第三行的值的时候，我们需要用到第一行的值吗？答是不需要的，当你要填充第三，第四….第 n行的时候，第一行的值永远不会用到，只要填充第二行的值时会用到。</p></blockquote><p>根据公式 <code>dp[i][j] = dp[i-1][j] + dp[i][j-1]</code>，我们可以知道，当我们要计算第 i 行的值时，除了会用到第 <code>i-1</code> 行外，其他第 1 至 第 <code>i-2</code> 行的值我们都是不需要用到的，<strong>那对于那部分用不到的值我们还有必要保存他们吗？</strong></p><p><strong>没必要</strong>，我们只需要用一个一维的 <code>dp[]</code> 来保存一行的历史记录就可以了。然后在计算的过程中，不断的更新 <code>dp[]</code> 的值。</p><p>估计你可能不好理解，下面我就手把手来演示下这个过程。</p><hr><ol><li>刚开始初始化第一行，此时 dp[0..n-1] 的值就是第一行的值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">dp[<span class="number">3</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>1</th><th>1</th><th>1</th><th>1</th></tr></thead><tbody><tr><td>*</td><td>*</td><td>*</td><td>*</td></tr><tr><td>*</td><td>*</td><td>*</td><td>*</td></tr><tr><td>*</td><td>*</td><td>*</td><td>*</td></tr></tbody></table><ol start="2"><li>接着我们来一边填充第二行的值一边更新 dp[i] 的值，一边把第一行的值抛弃掉。</li></ol><blockquote><p>为了方便描述，下面我们用<code>arr (i，j)</code>表示矩阵中第 i 行 第 j 列的值。从 0 开始，就是说有第 0 行。</p></blockquote><ul><li>显然，矩阵(1, 0) 的值相当于以往的初始化值，为 1。然后这个时候矩阵 (0，0）的值不在需要保存了，因为再也用不到了。</li></ul><table><thead><tr><th>*</th><th>1</th><th>1</th><th>1</th></tr></thead><tbody><tr><td>1</td><td>*</td><td>*</td><td>*</td></tr><tr><td>*</td><td>*</td><td>*</td><td>*</td></tr><tr><td>*</td><td>*</td><td>*</td><td>*</td></tr></tbody></table><ul><li>这个时候，我们也要跟着更新 <code>dp[0]</code> 的值了，刚开始 <code>dp[0] = (0, 0)</code>，现在更新为 <code>dp[0] = (1, 0)</code> 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">//第二行的第一个元素</span></span><br></pre></td></tr></table></figure><ul><li>接着继续更新 (1, 1) 的值，根据之前的公式 <code>（i, j）= (i-1, j) + (i, j- 1)</code>。即 （1，1）=（0，1）+（1，0）=2。</li></ul><table><thead><tr><th>*</th><th>1</th><th>1</th><th>1</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>*</td><td>*</td></tr><tr><td>*</td><td>*</td><td>*</td><td>*</td></tr><tr><td>*</td><td>*</td><td>*</td><td>*</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">1</span>; --&gt; dp[<span class="number">1</span>] = <span class="number">2</span>; <span class="comment">//根据公式更新,由第一行转到第二行,第一行的抛弃掉</span></span><br></pre></td></tr></table></figure><p>以往的二维的时候， <code>dp[i][j] = dp[i-1] [j]+ dp[i][j-1]</code>。现在转化成一维，不就是 <code>dp[i] = dp[i] + dp[i-1]</code> 吗？</p><p>即 dp[1] = dp[1] + dp[0]，而且还动态帮我们更新了 dp[1] 的值。因为刚开始 dp[i] 的保存第一行的值的，<code>现在更新为</code>保存第二行的值。</p><table><thead><tr><th>*</th><th>*</th><th>1</th><th>1</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>*</td><td>*</td></tr><tr><td>*</td><td>*</td><td>*</td><td>*</td></tr><tr><td>*</td><td>*</td><td>*</td><td>*</td></tr></tbody></table><ol start="3"><li>同样的道理，按照这样的模式一直来计算第二行的值，顺便把第一行的值抛弃掉，结果如下：</li></ol><table><thead><tr><th>*</th><th>*</th><th>*</th><th>*</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>*</td><td>*</td><td>*</td><td>*</td></tr><tr><td>*</td><td>*</td><td>*</td><td>*</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由第二行更新至第一行</span></span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">dp[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">dp[<span class="number">3</span>] = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>此时，dp[i] 将<code>完全保存着第二行</code>的值，并且我们可以推导出公式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dp[i] = dp[i-<span class="number">1</span>] + dp[i]</span><br><span class="line"><span class="comment">//注意</span></span><br><span class="line">dp[i-<span class="number">1</span>] 相当于之前的 dp[i-<span class="number">1</span>][j]，dp[i] 相当于之前的 dp[i][j-<span class="number">1</span>]。</span><br></pre></td></tr></table></figure><ol start="4"><li>于是按照这个公式不停着填充到最后一行，结果如下：</li></ol><table><thead><tr><th>*</th><th>*</th><th>*</th><th>*</th></tr></thead><tbody><tr><td>*</td><td>*</td><td>*</td><td>*</td></tr><tr><td>*</td><td>*</td><td>*</td><td>*</td></tr><tr><td>1</td><td>4</td><td>10</td><td>20</td></tr></tbody></table><p>最后 <code>dp[n-1]</code> 就是我们要求的结果了。所以优化之后，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m &lt;= <span class="number">0</span> || n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n]; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">      dp[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 第 i 行第 0 列的初始值</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 公式：dp[i] = dp[i-1] + dp[i]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[j] = dp[j-<span class="number">1</span>] + dp[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-案例二：编辑距离"><a href="#2-案例二：编辑距离" class="headerlink" title="2. 案例二：编辑距离"></a>2. 案例二：编辑距离</h4><p>也就是第二章节的案例四，如果你懒得翻，好吧，我也贴在下面：</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1 = word1.length();</span><br><span class="line">    <span class="keyword">int</span> n2 = word2.length();</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n1 + <span class="number">1</span>][n2 + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// dp[0][0...n2]的初始值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n2; j++) &#123;</span><br><span class="line">     dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">// dp[0...n1][0] 的初始值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过公式推出 dp[n1][n2]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n2; j++) &#123;</span><br><span class="line">            <span class="comment">// 如果 word1[i] 与 word2[j] 相等。第 i 个字符对应下标是 i-1</span></span><br><span class="line">            <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>))&#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">               dp[i][j] = Math.min(Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], dp[i][j - <span class="number">1</span>]), dp[i - <span class="number">1</span>][j]) + <span class="number">1</span>;</span><br><span class="line">            &#125;         </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n1][n2];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题的关系式是：<br><code>dp[i] [j] = min(dp[i-1] [j-1]，dp[i] [j-1]，dp[[i-1] [j]]) + 1;</code></p><h5 id="优化案例二"><a href="#优化案例二" class="headerlink" title="优化案例二"></a>优化案例二</h5><ul><li>对于这道题其实也是一样的，如果要计算 第 i 行的值，我们最多只依赖第 i-1 行的值，不需要用到第 i-2 行及其以前的值，所以一样可以采用一维 dp 来处理的。</li><li>不过这个时候要注意，在上面的例子中，我们每次更新完 (i, j) 的值之后，就会把 (i, j-1) 的值抛弃，也就是说之前是一边更新 dp[i] 的值，一边把 dp[i] 的旧值抛弃的，不过在这道题中则不可以，因为我们还需要用到它。</li></ul><hr><ol><li>当我们要计算图中 (i,j) 的值的时候，在案例1 中，我们值需要用到 (i-1, j) 和 (i, j-1)。（看图中方格的颜色）<br><img src="https://s2.ax1x.com/2020/02/05/1rKkGQ.png" alt="1rKkGQ.png"></li><li>不过这道题中，我们还需要用到 （i-1, j-1) 这个值（但是这个值在以往的案例1 中，它会被抛弃掉）<br><img src="https://s2.ax1x.com/2020/02/05/1rKA2j.png" alt="1rKA2j.png"><br>所以呢，对于这道题，我们还需要一个额外的变量 pre 来时刻保存 <code>(i-1,j-1)</code> 的值。推导公式就可以从二维的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = min(dp[i-<span class="number">1</span>][j] , dp[i-<span class="number">1</span>][j-<span class="number">1</span>] , dp[i][j-<span class="number">1</span>]) + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>转化为一维的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i] = min(dp[i-<span class="number">1</span>], pre, dp[i]) + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>所以呢，案例2 其实和案例1 差别不大，就是多了个变量来临时保存。</p><p>最终代码如下：</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1 = word1.length();</span><br><span class="line">    <span class="keyword">int</span> n2 = word2.length();</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n2 + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// dp[0...n2]的初始值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n2; j++) </span><br><span class="line">        dp[j] = j;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// dp[j] = min(dp[j-1], pre, dp[j]) + 1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = dp[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 相当于初始化</span></span><br><span class="line">        dp[<span class="number">0</span>] = i;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n2; j++) &#123;</span><br><span class="line">            <span class="comment">// pre 相当于之前的 dp[i-1][j-1]</span></span><br><span class="line">            <span class="keyword">int</span> pre = temp;</span><br><span class="line">            temp = dp[j];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果 word1[i] 与 word2[j] 相等。第 i 个字符对应下标是 i-1</span></span><br><span class="line">            <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>))&#123;</span><br><span class="line">                dp[j] = pre;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">               dp[j] = Math.min(Math.min(dp[j - <span class="number">1</span>], pre), dp[j]) + <span class="number">1</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// 保存要被抛弃的值       </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n2]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><h4 id="1-解法总结"><a href="#1-解法总结" class="headerlink" title="1. 解法总结"></a>1. 解法总结</h4><p>为什么动态规划的解法看起来如此精妙，是因为动态规划遵循一套固定的流程：</p><ul><li>递归的暴力解法</li><li>带备忘录的递归解法</li><li>非递归的动态规划解法（关键）</li></ul><p>用我们的方法就是：</p><ul><li>定义数组元素的含义</li><li>找出数组元素之间的关系式</li><li>找出初始值</li></ul><p>通俗一点就是：</p><ul><li>你要求什么</li><li>往后退一步</li><li>公式求不出的值</li></ul><hr><h4 id="2-作者总结"><a href="#2-作者总结" class="headerlink" title="2. 作者总结"></a>2. 作者总结</h4><blockquote><p>上面的这些题，基本都是不怎么难的入门题，除了最后一道相对难一点。并且基本 80% 的二维矩阵 dp 都可以像上面的方法一样优化成一维矩阵的dp，核心就是要画图，看他们的值依赖，当然，还有很多其他比较难的优化，但是，我遇到的题中，大部分都是我上面这种类型的优化。</p></blockquote><p>所以说，看完我写的这篇文章是一个什么水平呢？毫不夸张的说，你对于动态规划乃至于算法已经<code>入门</code>了，恭喜，以后还有更多更难的题目等着你，更多关于技术的分享文章，请<a href="https://wsuo.github.io/" target="_blank" rel="noopener">点击</a>。</p><p>最后谢谢你的观看。</p><hr><p>参考文章：<br><a href="https://leetcode-cn.com/problems/edit-distance/" target="_blank" rel="noopener">1、力扣：72.编辑距离</a><br><a href="https://leetcode-cn.com/problems/unique-paths/" target="_blank" rel="noopener">2、力扣：62.不同路径</a><br><a href="https://juejin.im/post/5d556b7ef265da03aa2568d5#heading-8" target="_blank" rel="noopener">3、动态规划套路详解</a><br><a href="https://blog.csdn.net/u013309870/article/details/75193592" target="_blank" rel="noopener">4、算法-动态规划 Dynamic Programming–从菜鸟到老鸟</a><br><a href="https://zhuanlan.zhihu.com/p/91582909?utm_source=qq&utm_medium=social&utm_oi=1116438468829691904" target="_blank" rel="noopener">5、告别动态规划，连刷 40 道题，我总结了这些套路，看不懂你打我</a><br><a href="https://blog.csdn.net/mu399/article/details/7722810" target="_blank" rel="noopener">6、动态规划之01背包问题（最易理解的讲解）</a><br><a href="https://zhuanlan.zhihu.com/p/30959069" target="_blank" rel="noopener">7、0-1背包问题的动态规划算法</a></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿&lt;code&gt;前言的前言：&lt;/code&gt;本篇文章较长，请择需阅读，右边（或左边）有目录，我也根据内容对目录做了详细的划分，本文参考网上各大博客再加上自己的总结，将我认为最有用最容易理解的部分整合到了一起，希望对你有所帮助！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;前言：&lt;/co
      
    
    </summary>
    
    
      <category term="数据结构和算法" scheme="http://wsuo.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://wsuo.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://wsuo.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="动态规划" scheme="http://wsuo.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>论坛术语</title>
    <link href="http://wsuo.top/posts/9149"/>
    <id>http://wsuo.top/posts/9149</id>
    <published>2020-02-04T02:25:49.000Z</published>
    <updated>2020-02-04T03:00:08.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下面是经常见到的在一些问答网站回答的一些缩写，我觉得很有趣也很有用，在此将其列举出来："><a href="#下面是经常见到的在一些问答网站回答的一些缩写，我觉得很有趣也很有用，在此将其列举出来：" class="headerlink" title="下面是经常见到的在一些问答网站回答的一些缩写，我觉得很有趣也很有用，在此将其列举出来："></a>下面是经常见到的在一些问答网站回答的一些缩写，我觉得很有趣也很有用，在此将其列举出来：</h3><ul><li>RTFSC (Read the fucking source code)</li><li>RTFM (Read the fucking manual)</li><li>UTFH (“Use The Fucking Help”)</li><li>STFW (“Search The Fucking Web”)</li><li>STFG (“Search The Fucking Google” or “Search The Fantastic Google”)</li><li>GIYF (“Google Is Your Friend”)</li><li>JFGI (“Just Fucking Google It”)</li><li>UTSL (“Use The Source Luke”—alternately, RTFS)</li><li>RTFA (“Read The Fucking Article”—common on news forums such as Fark.com[3] and Slashdot)</li><li>RTFE (“Read The Fucking Email”)</li><li>RTFC (“Read The Fucking Code,” or “Reboot The Fucking Computer”)</li><li>RTFQ (“Read The Fucking Question”)</li><li>LMGTFY (“Let Me Google That For You”)</li><li>WIDGI (“When In Doubt Google It” - Also occasionally ‘WIDGIT’)</li><li>FIOTI (“Find It On The Internet”)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;下面是经常见到的在一些问答网站回答的一些缩写，我觉得很有趣也很有用，在此将其列举出来：&quot;&gt;&lt;a href=&quot;#下面是经常见到的在一些问答网站回答的一些缩写，我觉得很有趣也很有用，在此将其列举出来：&quot; class=&quot;headerlink&quot; title=&quot;下面是经常见
      
    
    </summary>
    
    
      <category term="其他" scheme="http://wsuo.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="随笔" scheme="http://wsuo.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="有意思" scheme="http://wsuo.top/tags/%E6%9C%89%E6%84%8F%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客网站</title>
    <link href="http://wsuo.top/posts/30431"/>
    <id>http://wsuo.top/posts/30431</id>
    <published>2020-02-03T06:11:06.399Z</published>
    <updated>2020-02-04T03:00:08.449Z</updated>
    
    <content type="html"><![CDATA[<p>﻿### 不花一分钱使用Hexo搭建个人博客网站，从无到发表文章及更新教程</p><hr><blockquote><p>本文较长,也是楼主呕心沥血参考网上各种教程加上自己踩坑完成的,只希望能对你有所帮助。 </p></blockquote><ul><li>另外文章长达两万字，大家可以则需阅读。</li></ul><h4 id="0-首先介绍一下hexo是怎么搭建的博客"><a href="#0-首先介绍一下hexo是怎么搭建的博客" class="headerlink" title="0.首先介绍一下hexo是怎么搭建的博客?"></a>0.首先介绍一下hexo是怎么搭建的博客?</h4><blockquote><p>本地渲染好 HTML 后，上传到服务端，代表作品就是 hexo。<br>我们在本地写好 markdown 之后，在本地将 markdown 渲染成 HTML，然后将渲染好的 HTML 上传到服务端。</p></blockquote><p>我这里采用==hexo+icarus==实现的</p><h2 id="一、搭建"><a href="#一、搭建" class="headerlink" title="一、搭建"></a>一、搭建</h2><p>用 Hexo 搭建，要是有一点点前端 Node 的使用经验更佳，没有当然也没关系，因为与之相关的命令并不多。使用 Hexo 需要提前在电脑上安装好 Node 和 Git ，安装成功后，就可以开始 Hexo 的安装了。步骤如下：<br>1.安装hexo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>2.在本地创建一个博客目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>上面这个命令执行完后，会在本地创建一个 blog 目录，这里边就是独立博客所必须的一些文件，然后进入到这个目录中，执行 npm install 命令，安装相关的依赖。<br>3.安装完成后，会生成如下目录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── <span class="keyword">package</span>.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>这里几个文件/文件夹，我们先来关注其中两个 _config.yml 和 themes 目录， _config.yml 文件中，我们可以做网站的一些基本配置，例如 网站的 title，描述，关键字、图标等，这些配置大都见名知意。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: <span class="string">'王硕个人博客'</span> </span><br><span class="line">subtitle: <span class="string">'王硕个人博客'</span> </span><br><span class="line">description: <span class="string">'发表一些技术相关的文章以及自我反思等'</span> </span><br><span class="line">keywords: <span class="string">'java,王硕,wsuo,springboot'</span> </span><br><span class="line">author: <span class="string">'王硕'</span> </span><br><span class="line">language: zh-CN </span><br><span class="line">timezone: <span class="string">''</span></span><br></pre></td></tr></table></figure><p>配置完成后，定位到 blog 目录，执行 hexo s 就可以在本地启动项目了，启动成功后，浏览器中输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以看到网站了。</p><p>可以参考<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">hexo命令</a></p><h3 id="但是我在这里遇到了两个问题"><a href="#但是我在这里遇到了两个问题" class="headerlink" title="但是我在这里遇到了两个问题"></a>但是我在这里遇到了两个问题</h3><h4 id="1-命令行报错-YAMLException-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-10-column-7"><a href="#1-命令行报错-YAMLException-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-10-column-7" class="headerlink" title="1.命令行报错:YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 10, column 7:"></a>1.命令行报错:YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 10, column 7:</h4><p>解决方案: 由于是yml文件,在每一个冒号后面都要加空格,我有一个忘记加了没看到,所以报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title: <span class="string">'王硕个人博客'</span></span><br></pre></td></tr></table></figure><p>就是上面的冒号后面要加空格</p><h4 id="2-登陆博客之后中文乱码"><a href="#2-登陆博客之后中文乱码" class="headerlink" title="2.登陆博客之后中文乱码"></a>2.登陆博客之后中文乱码</h4><p>解决方案: 将那个yml文件的编码改成UTF-8格式<br>我用的是edit-plus打开的,右下角可以直接改,一般的编辑器都可以改的</p><p>好了,到目前为止算是有一个有模有样的博客网站了</p><h2 id="二、修改主题"><a href="#二、修改主题" class="headerlink" title="二、修改主题"></a>二、修改主题</h2><blockquote><p>一般来说，主题都会自己配置一个，个人感觉 Hexo 的生态还是比较丰富的，有很多可选的主题，Hexo 默认使用的主题是 landscape 。博客在本地跑起来之后，接下来就是修改主题，主题修改的第一步就是先选一个自己认为好看的主题，选好之后，首先将之克隆到 ./themes 目录下，这个目录下原本有有一个 landscape 文件夹，里边放的默认的样式，当然开发者也可以直接将主题文件下载好拷贝进来，但是我还是建议使用 clone ，使用 clone ，假如有一天这个主题更新了，只需要 pull 一下就可以获取到最新样式了。</p></blockquote><p>不会用git的可以参考我的另一篇文章<a href="https://editor.csdn.net/md/?articleId=104134298" target="_blank" rel="noopener">git命令</a></p><h4 id="以-hexo-theme-next-主题为例，-clone-命令如下："><a href="#以-hexo-theme-next-主题为例，-clone-命令如下：" class="headerlink" title="以 hexo-theme-next 主题为例， clone 命令如下："></a>以 hexo-theme-next 主题为例， clone 命令如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd D:\develop\blog\blog</span><br><span class="line">git clone https:<span class="comment">//github.com/iissnan/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure><p>克隆成功后，修改 hexo 的 _config.yml 文件，将主题修改为 next，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>主题创建好之后，接下来就是对主题的配置了，这个比较容易，直接参考官方文档即可。配置完成后，执行如下命令，即可看到新的主题效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="三、绑定到GitHub"><a href="#三、绑定到GitHub" class="headerlink" title="三、绑定到GitHub"></a>三、绑定到GitHub</h2><p>绑定到 Github 步骤也很简单，首先以 自己的GitHub ID.github.io 为名创建一个 public 仓库，例如我的 ID 为 wsuo，创建的仓库如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsuo.github.io</span><br></pre></td></tr></table></figure><p>创建成功之后，修改 hexo 的 _config.yml 文件，配置 GitHub 地址，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git<span class="meta">@github</span>.com:wsuo/wsuo.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这里根据自己的地址来配置即可，配置完成后，执行如下命令：<br>在<strong>站点目录下</strong>还要在 <strong>hexo init 的根目录下</strong>执行输入下面的插件安装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">然后启动:</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>执行完成后，就可以将数据上传到 GitHub 了<br>上传成功后，访问 <a href="https://wsuo.github.io" target="_blank" rel="noopener">https://wsuo.github.io</a> 就可以看到自己的个人站点了，这是 GitHub 默认给我们提供的域名。<br>如果你对 GitHub 提供的域名不满意，也可以自己申请一个域名，分分钟就配置好了。</p><p>如果你访问不了你的博客:</p><blockquote><p>登陆GitHub查看仓库的setting,然后往下翻找到github pages,有一个蓝色的网址点击,那个就是了.</p></blockquote><p>每次更新文章需要做:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment">// 清除</span></span><br><span class="line"><span class="function">hexo <span class="title">g</span> <span class="params">(generate)</span></span></span><br><span class="line"><span class="function">hexo <span class="title">d</span> <span class="params">(deploy)</span></span></span><br></pre></td></tr></table></figure><h2 id="四、配置博客"><a href="#四、配置博客" class="headerlink" title="四、配置博客"></a>四、配置博客</h2><p>好了，到现在为止你已经可以正常的访问了，是不是挺开心的，但是有一点就是他看起来太丑了，下面我们呢就来优化一下界面，提升一下它的颜值。</p><h3 id="1-blog配置"><a href="#1-blog配置" class="headerlink" title="1. blog配置"></a>1. blog配置</h3><p>好了！准备进入正题！下面将带领各位怎么将一个空空如也的blog装饰成博主一样有那么一点起色的网站。博主将从零搭起，所有的操作都将在博主的笔记本上为大家做出示范。</p><h4 id="1-1-next主题基本配置"><a href="#1-1-next主题基本配置" class="headerlink" title="1.1 next主题基本配置"></a>1.1 next主题基本配置</h4><p>首先我们先下载<a href="https://github.com/theme-next/hexo-theme-next/releases" target="_blank" rel="noopener">next主题</a>在这里选择大家需要的版本进行下载。下载完成后，我们的blog便有了两个主要的配置文件，分别是hexo自带的<code>_config.yml</code>文件和next主题自带的<code>_config.yml</code>文件，为了方便，我们将hexo自带的<code>_config.yml</code>文件称为站点配置文件，next主题带的<code>_config.yml</code>文件称为主题配置文件。</p><p>首先，第一步我们来更换一下blog的主题，这一步又分为三个小步骤：</p><ol><li>将下载下来的next主题文件夹重命名为 next 。</li><li>将next文件夹移入blog所在的文件夹的themes 文件夹中，在这里，本人是/blog/themes</li><li>修改站点配置文件，在配置文件中搜索theme，将其的值改为next。注意 冒号： 后面一定要有一个空格<br>// 站点<code>_config.yml</code> 文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>现在主题就已经配置好了，接下来我们优化一下：继续修改站点配置文件：<br>// 站点_config.yml 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Eternal_zttz #网站的名字</span><br><span class="line">subtitle: Saty Hungry，Stay Foolish #网站的副标题</span><br><span class="line">description: 个人blog网站 #个人的描述</span><br><span class="line">keywords:</span><br><span class="line">author: Eternal_zttz #博主的名字</span><br><span class="line">language: zh-CN #blog的语言  zh-CN 代表中文</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><p>然后我们修改主题配置文件：<br>// 主题_config.yml 文件 ，搜索Schemes可找到</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><p>这是next的基本页面布局，默认为Muse布局，在这里，我们选择第三个Pisces</p><p>很好，接下来，我们在终端命令行cd 进入blog所在目录，如我是直接命名为blog，所以<code>cd blog</code>:</p><p>接着运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>ok，我们的blog已经略有起色，样式已经离我们的最终样式八九不离十了，接下来，我们将对其的各个部分进行优化：</p><h4 id="1-2-next主题侧边栏优化"><a href="#1-2-next主题侧边栏优化" class="headerlink" title="1.2 next主题侧边栏优化"></a>1.2 next主题侧边栏优化</h4><h5 id="1-2-1-next主题页面生成"><a href="#1-2-1-next主题页面生成" class="headerlink" title="1.2.1 next主题页面生成"></a>1.2.1 next主题页面生成</h5><p>我们可以看到，hexo默认生成的页面只有两个，即<code>首页</code>和<code>归档</code> 页面，那么接下来，我们来生成我们所需的页面：</p><h6 id="1-2-1-1-页面的生成"><a href="#1-2-1-1-页面的生成" class="headerlink" title="1.2.1.1 页面的生成"></a>1.2.1.1 页面的生成</h6><p>首先，我们修改主题配置文件：<br>// 主题_config.yml 文件 ，搜索menu可找到</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home   #主页</span><br><span class="line">  about: /about/ || user  #关于</span><br><span class="line">  tags: /tags/ || tags   #标签</span><br><span class="line">  categories: /categories/ || th  #分类</span><br><span class="line">  archives: /archives/ || archive  #归档</span><br><span class="line">  #schedule: /schedule/ || calendar  #日程表</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap   #站点地图</span><br><span class="line">  #commonweal: /404/ || heartbeat    #公益404</span><br></pre></td></tr></table></figure><p>可以看到，大部分的都是注释掉了的，这里我已经把我需要的页面注释解除了，大家可以自行考虑需要的页面。<br>在这里，<strong>斜线//</strong>之间的文字是 该页面 的名字，如<code>／about／</code> ，说明我们要跳转的页面的名字为about , 而<code>||</code>后的文字是这个页面的图标名字.<br>这时候我们主页上就可以看到这几个页面，接下来实现页面的跳转：</p><h6 id="1-2-1-2-生成about页面"><a href="#1-2-1-2-生成about页面" class="headerlink" title="1.2.1.2 生成about页面"></a>1.2.1.2 生成about页面</h6><p>终端回到blog的根目录.运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page <span class="string">"about"</span></span><br></pre></td></tr></table></figure><p>ok,接下来关于页面的markdown自己编写就行。</p><h6 id="1-2-1-3-生成tags页面"><a href="#1-2-1-3-生成tags页面" class="headerlink" title="1.2.1.3 生成tags页面"></a>1.2.1.3 生成tags页面</h6><p>终端回到blog的根目录.运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page <span class="string">"tags"</span></span><br></pre></td></tr></table></figure><h6 id="1-2-1-4-生成categories页面"><a href="#1-2-1-4-生成categories页面" class="headerlink" title="1.2.1.4 生成categories页面:"></a>1.2.1.4 生成categories页面:</h6><p>终端回到categories的根目录.运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page <span class="string">"categories"</span></span><br></pre></td></tr></table></figure><p>tags和categorise页面不用自己布局，会自动根据我们的blog的布局好</p><h5 id="1-2-2-站内搜索的实现"><a href="#1-2-2-站内搜索的实现" class="headerlink" title="1.2.2 站内搜索的实现"></a>1.2.2 站内搜索的实现</h5><p>文章写多了，想一篇篇的去寻找可不容易，这时候，我们便需要一个站内的搜索功能，即服务别人，也能方便自己。<br>首先，我们在终端进入blog的根目录下，执行以下命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>接着，我们进入站点配置文件_config.yml,在最后新增以下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>最后，打开主题配置文件_config.yml,搜索local_search,其值改为true：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>ok，现在站内搜索就大功告成了，一切准备就绪～</p><h5 id="1-2-3-个人头像设置"><a href="#1-2-3-个人头像设置" class="headerlink" title="1.2.3 个人头像设置"></a>1.2.3 个人头像设置</h5><p>要设置自己的侧边栏头像，首先，准备一张头像的图片，命名为<code>header.jpg</code>，然后，将图片放在<code>/blog/themes/next/source/images/</code>文件夹下，接着修改主题配置文件，搜索<code>avatar</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  # in theme directory(source/images): /images/avatar.gif</span><br><span class="line">  # in site  directory(source/uploads): /uploads/avatar.gif</span><br><span class="line">  # You can also use other linking images.</span><br><span class="line">   - url: /images/avatar.gif</span><br><span class="line">   + url: /images/header.jpg     #图片的地址</span><br><span class="line">  # If true, the avatar would be dispalyed in circle. </span><br><span class="line">  rounded: false   #设置图片是否为圆形，当图片为正方形时为圆，否则为椭圆</span><br><span class="line">  # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span><br><span class="line">  opacity: 1 #图片的透明度</span><br><span class="line">  # If true, the avatar would be rotated with the cursor.</span><br><span class="line">  rotated: false  #设置鼠标移到图片上后头像是否转动</span><br></pre></td></tr></table></figure><p>将url里面的值改为图片的地址就可以了</p><h5 id="1-2-4-点击个人头像回到主页面"><a href="#1-2-4-点击个人头像回到主页面" class="headerlink" title="1.2.4 点击个人头像回到主页面"></a>1.2.4 点击个人头像回到主页面</h5><p>首先，我们打开文件<code>/blog/themes/next/layout/_macro/sidebar.swig</code>,然后，修改以下内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ &lt;a href=<span class="string">"/"</span>&gt;</span><br><span class="line">    &lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">"site-author-image"</span> itemprop=<span class="string">"image"</span></span><br><span class="line">       src=<span class="string">"&#123;&#123; url_for( theme.avatar.url | default(theme.images + '/avatar.gif') ) &#125;&#125;"</span></span><br><span class="line">       alt=<span class="string">"&#123;&#123; author &#125;&#125;"</span> /&gt;</span><br><span class="line">+ &lt;/a&gt;</span><br></pre></td></tr></table></figure><p>ok，重新部署一下，就可以看到效果了</p><h5 id="1-2-5-RSS订阅设置"><a href="#1-2-5-RSS订阅设置" class="headerlink" title="1.2.5 RSS订阅设置"></a>1.2.5 RSS订阅设置</h5><p>首先，我们在终端命令行进入blog所在的目录，运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure><p>接着，打开站点配置文件，在文件的末尾添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http://hexo.io/plugins/</span><br><span class="line">plugins: hexo-generate-feed</span><br></pre></td></tr></table></figure><p>然后打开主题配置文件，搜索rss，将其设置成如下所示，注意冒号后<code>要加上一个空格</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Set rss to false to disable feed link.</span><br><span class="line"># Leave rss as empty to use site's feed link, and install hexo-generator-feed: `npm install hexo-generator-feed --save`.</span><br><span class="line"># Set rss to specific value if you have burned your feed already.</span><br><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><p>OK，all right</p><blockquote><p>但是,你知道RSS是啥吗?</p></blockquote><blockquote><p>RSS全称为Really Simple Syndication（简易信息聚合） ，是站点用来和其他站点之间共享内容的一种简易方式<br>，RSS以其方便快捷的工作方式，为广大网编带了工作效率的跨越，但是也助长了信息高速重复<br>。这是百度百科对其解释，我们可以理解为它是一种描述和同步网站内容的格式，用于定制个性化的内容推送信息服务。在如今信息爆炸的时代，它最大的用处便是按照你自己的意愿，帮助你过滤调不需要阅读的信息，不会漫无目的地阅读。更灵活的一点是，rss订阅是跨平台的，可以按照自己的意愿去订阅不同网站和咨询平台，当然包括你所喜欢的某些个人博客。</p></blockquote><p><strong>在浏览器上使用rss订阅</strong></p><p>这里我推荐一个chrome上的一个订阅插件，打开谷歌浏览器，进入谷歌应用商店，搜索rss;</p><p>添加安装即可，安装完成后会提示你注册一个账号，按照提示注册完成即可。完成插件安装之后，在浏览博客或者其他网站时，点击rss订阅图标，就可以正常订阅成功。</p><p>在浏览器订阅后，假如订阅的站点有更新，插件就会推送和提醒</p><p>除了在浏览器订阅的方式，还有在客户端上订阅的使用方式，而且订阅功能更为强大。rss订阅的客户端有很多，各个平台的也都有，Windows、Mac、Android、Ios都用有不少客户端。</p><h5 id="1-2-6-社交栏设置"><a href="#1-2-6-社交栏设置" class="headerlink" title="1.2.6 社交栏设置"></a>1.2.6 社交栏设置</h5><p>在主题配置文件中，搜索social，定位到如下代码段，把social的注释取消掉，接下来，就看你需要显示什么社交网站，写上网站名+网址就行。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https:<span class="comment">//github.com/yourname || github   #网站名：网址 ||图标名</span></span><br><span class="line">  简书: http:<span class="comment">//www.jianshu.com || heartbeat</span></span><br><span class="line">  #E-Mail: mailto:yourname@gmail.com || envelope</span><br><span class="line">  #Google: https://plus.google.com/yourname || google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || facebook</span><br><span class="line">  #VK Group: https://vk.com/yourname || vk</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || skype</span><br></pre></td></tr></table></figure><h5 id="1-2-7-实现侧边栏页面的圆角"><a href="#1-2-7-实现侧边栏页面的圆角" class="headerlink" title="1.2.7 实现侧边栏页面的圆角"></a>1.2.7 实现侧边栏页面的圆角</h5><ol><li><p>首先，我们打开<code>/blog/themes/next/source/css/_variables/Pisces.styl</code>文件，里面定义了一些常量，用来定义blog样式表的值。</p></li><li><p>然后，找到<code>$border-radius</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Borders</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line">$box-shadow-inner                 = initial;</span><br><span class="line">$box-shadow                       = initial;</span><br><span class="line"></span><br><span class="line">$border-radius-inner              = initial;</span><br><span class="line">$border-radius                    = initial;</span><br></pre></td></tr></table></figure><p>可以看到默认为初始值，即为0<br>改变 为<code>$border-radius = 16px;</code><br>这时候，下面的一个侧边栏弧度就已经改好了</p></li><li><p>接着，打开<code>/blog/themes/next/source/css/_schemes/Pisces/_layout.styl</code>文件</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.header-inner &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: <span class="number">0</span>;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  padding: <span class="number">0</span>;</span><br><span class="line">  width: $sidebar-desktop;</span><br><span class="line">  background: white;</span><br><span class="line">  box-shadow: $box-shadow-inner;</span><br><span class="line"> -border-radius: $border-radius-inner;</span><br><span class="line"> +border-radius: $border-radius;<span class="comment">//修改上面的侧边栏的弧度</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.content-wrap &#123;</span><br><span class="line">  <span class="keyword">float</span>: right;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  padding: $content-desktop-padding;</span><br><span class="line">  width: $content-desktop;</span><br><span class="line">  background: white;</span><br><span class="line">  min-height: <span class="number">700</span>px;</span><br><span class="line">  box-shadow: $box-shadow-inner;</span><br><span class="line"> - border-radius: $border-radius-inner;</span><br><span class="line"> + border-radius: $border-radius; <span class="comment">//修改整个文章页面的弧度</span></span><br></pre></td></tr></table></figure><p>ok 大功告成，到此为止，我们文章的侧边栏就已经优化完毕了，当然，还有更多操作，大家可以去尝试，不过，建议没有把握之前先做好blog的备份。</p><h3 id="2-next主题主页面优化"><a href="#2-next主题主页面优化" class="headerlink" title="2. next主题主页面优化"></a>2. next主题主页面优化</h3><p>在上面我们已经把侧边栏的优化都已经完成了，不得不说，刚完成这一部分时我还是有很大的成就感的，接下来，我们将对我们blog的主页面进行进一步的优化。</p><h4 id="2-1-增加fork-me-on-github-图标"><a href="#2-1-增加fork-me-on-github-图标" class="headerlink" title="2.1 增加fork me on github 图标"></a>2.1 增加fork me on github 图标</h4><p>在这里<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">GitHub地址</a>选择一款自己喜欢的图标，然后把图标旁的代码拷贝一份，放到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog/themes/next/layout/_layout.swig</span><br></pre></td></tr></table></figure><p>这个文件夹中，注意要放到<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>的下方<br>OK,这就大功告成了。</p><h4 id="2-2-文章背景出现阴影边框"><a href="#2-2-文章背景出现阴影边框" class="headerlink" title="2.2 文章背景出现阴影边框"></a>2.2 文章背景出现阴影边框</h4><p>这个效果实现起来很简单，打开<code>blog\themes\next\source\css\_custom\custom.styl</code>文件，放入以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主页文章添加阴影效果</span></span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: <span class="number">60</span>px;</span><br><span class="line">   margin-bottom: <span class="number">60</span>px;</span><br><span class="line">   padding: <span class="number">25</span>px;</span><br><span class="line">   -webkit-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span><span class="function">px <span class="title">rgba</span><span class="params">(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">.5</span>)</span></span>;</span><br><span class="line">   -moz-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span><span class="function">px <span class="title">rgba</span><span class="params">(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">.5</span>)</span></span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>重新部署一下即可实现。</p><h4 id="2-3-“-阅读全文-”-按钮改弧度"><a href="#2-3-“-阅读全文-”-按钮改弧度" class="headerlink" title="2.3 “ 阅读全文 ” 按钮改弧度"></a>2.3 “ 阅读全文 ” 按钮改弧度</h4><p>这个功能和侧边栏改弧度的操作是差不多的，进入文件<code>/blog/themes/next/source/css/_variables/Pisces.styl</code>中，把以下代码修改一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button</span></span><br><span class="line"> <span class="number">1</span>. $btn-<span class="keyword">default</span>-radius           = <span class="number">2</span>px</span><br><span class="line"> <span class="number">2</span>. $btn-<span class="keyword">default</span>-radius           = <span class="number">16</span>px</span><br><span class="line">$btn-<span class="keyword">default</span>-bg               = white</span><br><span class="line">$btn-<span class="keyword">default</span>-color            = $text-color</span><br><span class="line">$btn-<span class="keyword">default</span>-border-color     = $text-color</span><br><span class="line">$btn-<span class="keyword">default</span>-hover-color      = white</span><br><span class="line">$btn-<span class="keyword">default</span>-hover-bg         = $black-deep</span><br></pre></td></tr></table></figure><h4 id="2-4-为文章内容添加统计功能，文字总数-阅读时长"><a href="#2-4-为文章内容添加统计功能，文字总数-阅读时长" class="headerlink" title="2.4 为文章内容添加统计功能，文字总数+阅读时长"></a>2.4 为文章内容添加统计功能，文字总数+阅读时长</h4><ol><li>终端进入blog根目录，执行下面代码：</li></ol><blockquote><p>$ npm install hexo-symbols-count-time –save</p></blockquote><ol start="2"><li>进入站点配置文件，为blog配置统计功能，将以下代码复制到最后：</li></ol><blockquote><p>symbols_count_time:<br>  symbols: true<br>  time: true<br>  total_symbols: true<br>  total_time: true</p></blockquote><ol start="3"><li>进入主题配置文件，搜素symbols_count_time,然后把要显示的改为true.<br>更深入的操作大家可以看github上的说明。<br>PS：如果大家配置完成，然后检查无误后，打开页面依旧没有显示，不要着急，第一次显示可能会比较慢，可以休息一会。</li></ol><h4 id="2-5-为文章中的代码块增加一键复制功能"><a href="#2-5-为文章中的代码块增加一键复制功能" class="headerlink" title="2.5 为文章中的代码块增加一键复制功能"></a>2.5 为文章中的代码块增加一键复制功能</h4><p>在next v6.3.0 版本中，这个功能已经是集成了的，我们进入站点配置文件，搜索copy_button。把它的值改为true即可：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Add copy button on codeblock</span><br><span class="line">  copy_button:copy</span><br><span class="line">    enable: true  #是否开启复制功能</span><br><span class="line">    # Show text copy result</span><br><span class="line">    show_result: true #是否显示提示的复制结果</span><br></pre></td></tr></table></figure><p>接着，将鼠标移动到代码块中，便可以看到结果。默认按钮是中文“复制”，若是想改为英文“copy”，可进入<code>blog/themes/next/languages/zh-CN.yml</code>文件中，将下面部分改了即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">copy_button: copy</span><br><span class="line">copy_success: succeed</span><br><span class="line">copy_failure: failed</span><br><span class="line">copyright:</span><br><span class="line">   author: 本文作者</span><br></pre></td></tr></table></figure><p>这个文件夹中保留了所有的中英部分的对应关系，大家想改各标签名字的话，可以将这个文件中对应的部分改了即可。</p><h4 id="2-6-增加版权信息"><a href="#2-6-增加版权信息" class="headerlink" title="2.6 增加版权信息"></a>2.6 增加版权信息</h4><p>博文写好了，怎么说也是作者的一番心血，我们不去抄袭别人的作品，也不希望别人什么都不说带走我们的作品，所以，我们需要在底部做一个版权申明：<br>next主题中现在已经是集成了这个功能的了，我们只在主题配置文件中搜索<code>copyright</code>,并把<code>enable</code>的值改为<code>true</code>即可.</p><h3 id="3-next主题底部优化"><a href="#3-next主题底部优化" class="headerlink" title="3. next主题底部优化"></a>3. next主题底部优化</h3><h4 id="3-1为文章增加评论功能"><a href="#3-1为文章增加评论功能" class="headerlink" title="3.1为文章增加评论功能"></a>3.1为文章增加评论功能</h4><p>next主题的6.x版里面已经集成了很多评论了，包括Gitment和Valine，大家有兴趣可以去试一试。<br>安装 utterances<br>utterances 的安装相当简单，因为出品了一个 Github App。</p><p>首先安装这个 App ，选择要关联评论的仓库。可以选择所有仓库，也可以只选择一个仓库。选择一个仓库比较安全。</p><p><img src="https://img-blog.csdnimg.cn/20200203135643884.png" alt="新建仓库"><br>不过 utterances 没有集成在 NexT 主题中，需要手动添加。</p><p>打开主题文件夹，在 <code>layout/_third-party/comments/</code> 中新建文件 <code>utterances.swig</code>，并添加下面的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.utterances.enable %&#125;</span><br><span class="line">  &lt;script src=<span class="string">"https://utteranc.es/client.js"</span></span><br><span class="line">    repo=<span class="string">"&#123;&#123; theme.utterances.repo &#125;&#125;"</span></span><br><span class="line">    issue-term=<span class="string">"&#123;&#123; theme.utterances.issue_term &#125;&#125;"</span></span><br><span class="line">    theme=<span class="string">"&#123;&#123; theme.utterances.theme &#125;&#125;"</span></span><br><span class="line">    crossorigin=<span class="string">"anonymous"</span></span><br><span class="line">    async&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>layout/_partials/comments.swig</code> 中添加下面的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   &#123;% elseif theme.valine.enable and theme.valine.appid and theme.valine.appkey %&#125;</span><br><span class="line">     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"comments"</span> id=<span class="string">"comments"</span>&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">+</span><br><span class="line">+  &#123;% elseif theme.utterances.enable %&#125;</span><br><span class="line">+    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"comments"</span> id=<span class="string">"comments"</span>&gt;</span><br><span class="line">+      &#123;% include <span class="string">'../_third-party/comments/utterances.swig'</span> %&#125;</span><br><span class="line">+    &lt;/div&gt;</span><br><span class="line">   &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>最后在主题配置文件中添加如下配置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">utterances:</span><br><span class="line">  enable: <span class="keyword">true</span></span><br><span class="line">  repo: # owner/repo</span><br><span class="line">  issue_term: # pathname, url, title, og:title [ISSUE NUMBER] or [SPECIFIC TERM]</span><br><span class="line">  theme: # github-light or github-dark</span><br></pre></td></tr></table></figure><p>三个配置选项都是必填的，第一个是配置 issue 所在的 repo，第二个是如何决定如何寻找对应的 issue，第三个决定采用亮或暗的主题。</p><p>然后可以愉快的使用了～</p><h4 id="3-2增加在线联系Daovoice"><a href="#3-2增加在线联系Daovoice" class="headerlink" title="3.2增加在线联系Daovoice"></a>3.2增加在线联系Daovoice</h4><p><a href="http://dashboard.daovoice.io/get-started?invite_code=5f355066" target="_blank" rel="noopener">链接</a><br>注册完成后会得到一个 app_id</p><blockquote><p>daovoice(‘init’, {<br>  app_id: “<strong>***</strong>“<br>});<br>daovoice(‘update’);</p></blockquote><p>记下这个app_id的值，然后打开<code>/blog/themes/next/layout/_partials/head/head.swig</code>文件，在如下位置插入代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (function(i,s,o,g,r,a,m)&#123;i[<span class="string">"DaoVoiceObject"</span>]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> Date();a=s.createElement(o),m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;a.charset=<span class="string">"utf-8"</span>;m.parentNode.insertBefore(a,m)&#125;)(window,document,<span class="string">"script"</span>,(<span class="string">'https:'</span> == document.location.protocol ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">"//widget.daovoice.io/widget/0f81ff2f.js"</span>,<span class="string">"daovoice"</span>)</span><br><span class="line">  daovoice(<span class="string">'init'</span>, &#123;</span><br><span class="line">      app_id: <span class="string">"&#123;&#123;theme.daovoice_app_id&#125;&#125;"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(<span class="string">'update'</span>);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>接着打开主题配置文件，在最后写下如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Online contact </span><br><span class="line">daovoice: <span class="keyword">true</span></span><br><span class="line">daovoice_app_id: 这里填你的刚才获得的 app_id</span><br></pre></td></tr></table></figure><h4 id="3-3-增加站点访问人数和总访问量"><a href="#3-3-增加站点访问人数和总访问量" class="headerlink" title="3.3 增加站点访问人数和总访问量"></a>3.3 增加站点访问人数和总访问量</h4><p>打开主题配置文件，搜索<code>busuanzi</code>，将<code>enable</code>的值改为<code>true</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: <span class="keyword">true</span></span><br><span class="line">  total_visitors: <span class="keyword">true</span></span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: <span class="keyword">true</span></span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: <span class="keyword">true</span></span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure><h2 id="五、发表博客"><a href="#五、发表博客" class="headerlink" title="五、发表博客"></a>五、发表博客</h2><p>发表文章<br>注意：如果自己直接新建文件，一定要记得加上文件最上方的参数，即下面的相关内容，还有编码请用 UTF-8。</p><p>关于文件最上方的参数，参见 Hexo 官方文档的 Front-matter 和页面变量，下面是我的总结：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"># ！！！！！！！！！！</span><br><span class="line"># 每一项的 : 后面均有一个空格</span><br><span class="line"># 且 : 为英文符号</span><br><span class="line"># ！！！！！！！！！！</span><br><span class="line"></span><br><span class="line">title:</span><br><span class="line"># 文章标题，可以为中文</span><br><span class="line"></span><br><span class="line">date:</span><br><span class="line"># 建立日期，如果自己手动添加，请按固定格式</span><br><span class="line"># 就算不写，页面每篇文章顶部的发表于……也能显示</span><br><span class="line"># 只要在主题配置文件中，配置了 created_at 就行</span><br><span class="line"># 那为什么还要自己加上？</span><br><span class="line"># 自定义文章发布的时间</span><br><span class="line"></span><br><span class="line">updated:</span><br><span class="line"># 更新日期，其它与上面的建立日期类似</span><br><span class="line"># 不过在页面每篇文章顶部，是更新于……</span><br><span class="line"># 在主题配置文件中，是 updated_at</span><br><span class="line"></span><br><span class="line">permalink:</span><br><span class="line"># 若站点配置文件下的 permalink 配置了 title</span><br><span class="line"># 则可以替换文章 URL 里面的 title（文章标题）</span><br><span class="line"></span><br><span class="line">categories:</span><br><span class="line"># 分类，支持多级，比如：</span><br><span class="line"># - technology</span><br><span class="line"># - computer</span><br><span class="line"># - computer-aided-art</span><br><span class="line"># 则为 technology/computer/computer-aided-art</span><br><span class="line"># （不适用于 layout: page）</span><br><span class="line"></span><br><span class="line">tags:</span><br><span class="line"># 标签</span><br><span class="line"># 多个可以这样写 [标签1,标签2,标签3]</span><br><span class="line"># （不适用于 layout: page）</span><br><span class="line"></span><br><span class="line">description:</span><br><span class="line"># 文章的描述，在每篇文章标题下方显示</span><br><span class="line"># 并且作为网页的 description 元数据</span><br><span class="line"># 如果不写，则自动取 &lt;!-- more --&gt;</span><br><span class="line"># 之前的文字作为网页的 description 元数据</span><br><span class="line"></span><br><span class="line">keywords:</span><br><span class="line"># 关键字，并且作为网页的 keywords 元数据</span><br><span class="line"># 如果不写，则自动取 tags 里的项</span><br><span class="line"># 作为网页的 keywords 元数据</span><br><span class="line"></span><br><span class="line">comments:</span><br><span class="line"># 是否开启评论</span><br><span class="line"># 默认值是 true</span><br><span class="line"># 要关闭写 false</span><br><span class="line"></span><br><span class="line">layout:</span><br><span class="line"># 页面布局，默认值是 post，默认值可以在</span><br><span class="line"># 站点配置文件中修改 default_layout</span><br><span class="line"># 另：404 页面可能用到，将其值改为 false</span><br><span class="line"></span><br><span class="line">type:</span><br><span class="line"># categories，目录页面</span><br><span class="line"># tags，标签页面</span><br><span class="line"># picture，用来生成 group-pictures</span><br><span class="line"># quote？</span><br><span class="line"># https://io-oi.me/tech/hello-world/</span><br><span class="line"></span><br><span class="line">photos:</span><br><span class="line"># Gallery support，用来支持画廊╱相册，用法如下：</span><br><span class="line"># - photo_url_1</span><br><span class="line"># - photo_url_2</span><br><span class="line"># - photo_url_3</span><br><span class="line"># https://io-oi.me/tech/hello-world/</span><br><span class="line"></span><br><span class="line">link:</span><br><span class="line"># 文章的外部链接</span><br><span class="line"># https://io-oi.me/tech/hello-world/</span><br><span class="line"></span><br><span class="line">image:</span><br><span class="line"># 自定义的文章摘要图片，只在页面展示，文章内消失</span><br><span class="line"># 此项只有参考本文 5.14 节配置好，否则请勿添加！</span><br><span class="line"></span><br><span class="line">sticky:</span><br><span class="line"># 文章置顶</span><br><span class="line"># 此项只有参考本文 5.15 节配置好，否则请勿添加！</span><br><span class="line"></span><br><span class="line">password:</span><br><span class="line"># 文章密码，此项只有参考教程：</span><br><span class="line"># http://shenzekun.cn/hexo的next主题个性化配置教程.html</span><br><span class="line"># 第 24 节，配置好，否则请勿添加！</span><br><span class="line"># 发现还是有 bug 的，就是右键在新标签中打开</span><br><span class="line"># 然后无论是否输入密码，都能看到内容</span><br></pre></td></tr></table></figure><h2 id="六、还有一些问题"><a href="#六、还有一些问题" class="headerlink" title="六、还有一些问题"></a>六、还有一些问题</h2><h3 id="1-Hexo之next主题设置首页不显示全文-只显示预览"><a href="#1-Hexo之next主题设置首页不显示全文-只显示预览" class="headerlink" title="1.Hexo之next主题设置首页不显示全文(只显示预览)"></a>1.Hexo之next主题设置首页不显示全文(只显示预览)</h3><p>next是Hexo的一个博客主题，这个主题 ，首页显示的文章列表，每一遍都是全文，不方便概览。</p><blockquote><p>进入hexo博客项目的themes/next目录<br>用文本编辑器打开_config.yml文件<br>搜索”auto_excerpt”,找到如下部分：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommand.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: <span class="keyword">false</span></span><br><span class="line">  length: <span class="number">150</span></span><br></pre></td></tr></table></figure><h3 id="2-头像设置"><a href="#2-头像设置" class="headerlink" title="2.头像设置"></a>2.头像设置</h3><p>打开<code>/blog/themes/next/source/images</code>,找到你想设置为头像的图片,然后打开<strong>主题配置文件</strong>,我的是在154行的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(source/images): /images/avatar.gif</span><br><span class="line"># in site  directory(source/uploads): /uploads/avatar.gif</span><br><span class="line">avatar: /images/header.jpg</span><br></pre></td></tr></table></figure><p>修改为你头像的路径就好了</p><p>后话：后来还是没有显示出来，我费尽周折想起了一个解决方案：</p><blockquote><p>我是这样解决的，既然他总是显示默认的头像图片，那他肯定有路径，我不需要知道路径在哪里配置，只需要找到那个默认头像然后用我想要的图片把它给替换掉，同名同路径肯定能显示，于是我照做了，成功了！！！自底向上解决问题，另外默认头像的位置是<code>themes\next\source\images\avatar.gif</code></p></blockquote><h3 id="3-侧边栏社交小图标设置"><a href="#3-侧边栏社交小图标设置" class="headerlink" title="3.侧边栏社交小图标设置"></a>3.侧边栏社交小图标设置</h3><p><a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">图标库</a>,将名字复制在配置文件的相关位置即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https:<span class="comment">//github.com/wsuo || github#网站名：网址 ||图标名</span></span><br><span class="line">  E-Mail: mailto:ws2821<span class="meta">@yeah</span>.net || envelope</span><br><span class="line">  #Google: https://plus.google.com/yourname || google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || facebook</span><br><span class="line">  #VK Group: https://vk.com/yourname || vk</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || skype</span><br><span class="line"></span><br><span class="line">social_icons:</span><br><span class="line">  enable: <span class="keyword">true</span></span><br><span class="line">  icons_only: <span class="keyword">false</span></span><br><span class="line">  transition: <span class="keyword">false</span></span><br></pre></td></tr></table></figure><h3 id="4-设置网站的图标-Favicon"><a href="#4-设置网站的图标-Favicon" class="headerlink" title="4.设置网站的图标 Favicon"></a>4.设置网站的图标 Favicon</h3><p>把你的图片（png 或 jpg 格式，不是 favicon.ico）放在<code>themes\next\source\images</code>里，然后打开 主题配置文件 找到favicon，将<code>small</code>、<code>medium</code>、<code>apple_touch_icon</code>三个字段的值都设置成<code>\images\图片名.jpg</code>就可以了，其他字段都注释掉。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/header.jpg</span><br><span class="line">  medium: /images/header.jpg</span><br><span class="line">  apple_touch_icon: /images/header.jpg</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure><h3 id="5-侧边栏推荐阅读"><a href="#5-侧边栏推荐阅读" class="headerlink" title="5.侧边栏推荐阅读"></a>5.侧边栏推荐阅读</h3><p>打开 <strong>主题配置文件</strong> 修改成这样就行了 (<code>links</code> 里面写你想要的链接):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Blog rolls</span><br><span class="line">links_icon: link</span><br><span class="line">links_title: 联系我</span><br><span class="line">links_layout: block</span><br><span class="line">#links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  wsuo的CSDN博客: https:<span class="comment">//blog.csdn.net/weixin_43941364</span></span><br></pre></td></tr></table></figure><h3 id="6-在网站底部加上访问量"><a href="#6-在网站底部加上访问量" class="headerlink" title="6.在网站底部加上访问量"></a>6.在网站底部加上访问量</h3><p>第一种方法：<br>打开<code>\themes\next\layout\_partials\footer.swig</code>文件, 在 copyright 前加上这句话，我是在文章的开头也就是第一行添加的：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;div class="copyright"&gt;&#123;#</span><br><span class="line">#&#125;&#123;% set current = date(Date.now(), "YYYY") %&#125;&#123;#</span><br></pre></td></tr></table></figure><p>然后再合适的位置添加显示统计的代码，我是在45行左右：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"powered-by"</span>&gt;</span><br><span class="line">&lt;i class="fa fa-user-md"&gt;&lt;/i&gt;&lt;span id="busuanzi_container_site_uv"&gt;</span><br><span class="line">  本站访客数:&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> theme.footer.custom_text %&#125;</span><br><span class="line">  &lt;div class="footer-custom"&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; theme.footer.custom_text &#125;&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>如果你使用了上面的方法就不要在使用下面的这个方法了，因为两个都用会出错，下面介绍第二种方法。</p><p>第一种引入脚本的方法适用于任何类型的个人站点，如果你使用的主题是NexT，那么你可以很方便的进行不蒜子的访客统计设置，仅仅只需要一步：</p><p>打开主题的配置文件<code>/theme/next/_config.yml</code>，找到如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Show PV/UV of the website/page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: <span class="keyword">true</span></span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: <span class="keyword">true</span></span><br><span class="line">  site_uv_header: 访客数</span><br><span class="line">  site_uv_footer: 人</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: <span class="keyword">true</span></span><br><span class="line">  site_pv_header: 总访问量</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: <span class="keyword">true</span></span><br><span class="line">  page_pv_header: &lt;i class="fa fa-file-o"&gt;&lt;/i&gt;  阅读数</span><br><span class="line">  page_pv_footer:</span><br></pre></td></tr></table></figure><p>将<code>enable</code>的值由false改为<code>true</code>，便可以看到页脚出现访问量</p><h3 id="7-增加本站运行时间"><a href="#7-增加本站运行时间" class="headerlink" title="7.增加本站运行时间"></a>7.增加本站运行时间</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="days"&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function">function <span class="title">show_date_time</span><span class="params">()</span></span>&#123;</span><br><span class="line">    window.setTimeout(<span class="string">"show_date_time()"</span>, <span class="number">1000</span>);</span><br><span class="line">    BirthDay=<span class="keyword">new</span> Date(<span class="string">"02/02/2020 20:02:02"</span>);<span class="comment">//修改为自己的blog建站时间</span></span><br><span class="line">    today=<span class="keyword">new</span> Date();</span><br><span class="line">    timeold=(today.getTime()-BirthDay.getTime());</span><br><span class="line">    sectimeold=timeold/<span class="number">1000</span></span><br><span class="line">    secondsold=Math.floor(sectimeold);</span><br><span class="line">    msPerDay=<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span></span><br><span class="line">    e_daysold=timeold/msPerDay</span><br><span class="line">    daysold=Math.floor(e_daysold);</span><br><span class="line">    e_hrsold=(e_daysold-daysold)*<span class="number">24</span>;</span><br><span class="line">    hrsold=setzero(Math.floor(e_hrsold));</span><br><span class="line">    e_minsold=(e_hrsold-hrsold)*<span class="number">60</span>;</span><br><span class="line">    minsold=setzero(Math.floor((e_hrsold-hrsold)*<span class="number">60</span>));</span><br><span class="line">    seconds=setzero(Math.floor((e_minsold-minsold)*<span class="number">60</span>));</span><br><span class="line">    document.getElementById(<span class="string">'days'</span>).innerHTML=<span class="string">"本站已安全运行"</span>+daysold+<span class="string">"天"</span>+hrsold+<span class="string">"小时"</span>+minsold+<span class="string">"分"</span>+seconds+<span class="string">"秒"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">function <span class="title">setzero</span><span class="params">(i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">10</span>)</span><br><span class="line">    &#123;i=<span class="string">"0"</span> + i&#125;;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">show_date_time();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在原next主题版本信息的下方增加上面的代码，代码在不同的位置会有不同的效果。</p><h3 id="8-next主题如何添加动态背景"><a href="#8-next主题如何添加动态背景" class="headerlink" title="8.next主题如何添加动态背景"></a>8.next主题如何添加动态背景</h3><blockquote><p>如果next主题在5.1.1以上的话就不用我这样设置，直接在主题配置文件中找到canvas_nest:<br>false，把它改为<code>canvas_nest: true</code>就行了（注意分号后面要加一个空格）</p></blockquote><p>打开 next/layout/_layout.swig<br>在 &lt; /body&gt;之前添加代码(注意不要放在&lt; /head&gt;的后面)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>打开 /next/_config.yml,在里面添加如下代码：(可以放在最后面)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># --------------------------------------------------------------</span><br><span class="line"># background settings</span><br><span class="line"># --------------------------------------------------------------</span><br><span class="line"># add canvas-nest effect</span><br><span class="line"># see detail from https://github.com/hustcc/canvas-nest.js</span><br><span class="line">canvas_nest: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="八、补充内容"><a href="#八、补充内容" class="headerlink" title="八、补充内容"></a>八、补充内容</h2><p><img src="https://img-blog.csdnimg.cn/20200203125100650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk0MTM2NA==,size_16,color_FFFFFF,t_70" alt="博客截图"><br>到目前为止如果你跟着我一步一步的做的话我们的博客已经很棒了，但是并不是说不能继续优化了，追求完美是每个人的目标，所以我们继续</p><h3 id="1-增加网易云音乐"><a href="#1-增加网易云音乐" class="headerlink" title="1.增加网易云音乐"></a>1.增加网易云音乐</h3><p>音乐是不应该被辜负的，所以，我们可以在侧边栏加上网易云的音乐外链，具体方法为：</p><blockquote><p>打开网易云音乐网页版，选择自己想要放上去的音乐。<br>在播放页面选择外链播放器，选择一个自己喜欢的样式。<br>复制其中的代码<br>打开<code>/blog/themes/next/layout/_macro/sidebar.swig</code> 文件，将代码复制到适合的位置，例如，我是在约161-162行增加</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% endif %&#125;</span><br><span class="line">         &#123;% include custom_sidebar %&#125;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">     &lt;/section&gt;</span><br><span class="line"></span><br><span class="line"> +  &lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=298 height=52 src="//music.163.com/outchain/player?type=2&amp;id=5079881&amp;auto=0&amp;height=32"&gt;&lt;/iframe&gt;</span><br><span class="line"></span><br><span class="line">     &#123;% <span class="function"><span class="keyword">if</span> display_toc and <span class="title">toc</span><span class="params">(page.content)</span>.length &gt; 1 %&#125;</span></span><br><span class="line"><span class="function">     &lt;!--noindex--&gt;</span></span><br><span class="line"><span class="function">       &lt;section class</span>=<span class="string">"post-toc-wrap motion-element sidebar-panel sidebar-panel-active"</span>&gt;</span><br><span class="line">         &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-toc"</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>就只用加带加号的那一行</strong></p><blockquote><p>如果你去网易云发现大部分的歌都有版权不让你使用外链的话，也可以直接使用我的代码，就是我的歌。</p></blockquote><h3 id="2-修改界面宽度"><a href="#2-修改界面宽度" class="headerlink" title="2.修改界面宽度"></a>2.修改界面宽度</h3><blockquote><p>之后我发现主页太短了，以至于两边有大量的空白区域，这里让他们更宽一些，看起来更美观，因为现在很多显示屏都是宽屏的，尤其是台式机配的屏幕，比例比横宽比例比笔记本要大很多，这样一来就导致了next主题默认的配置中，文章的两侧留白太多，阅读体验不好。可以通过修改next主题的文章页面宽度来解决。</p></blockquote><p>解决方案：</p><h2 id="七、结语"><a href="#七、结语" class="headerlink" title="七、结语"></a>七、结语</h2><p>第一篇两万字的博客，终于码完了，虽然最后很多功能我自己也没有实现，因为很多用不到来的功能，但是为了方便大家也都列出来了，如果你对我的文章感兴趣，欢迎留言或者私信我.</p><blockquote><p>我的Github地址:<br><a href="https://github.com/wsuo" target="_blank" rel="noopener">https://github.com/wsuo</a><br>我的个人网站地址:<br><a href="https://wsuo.github.io" target="_blank" rel="noopener">https://wsuo.github.io</a></p></blockquote><p>参考文章：<br>1.<a href="https://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html" target="_blank" rel="noopener">hexo高阶教程next主题优化</a><br>2.<a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">hexo的next主题个性化教程:打造炫酷网站</a><br>3.<a href="https://www.dingxuewen.com/categories/Site/" target="_blank" rel="noopener">Hexo搭建博客的个性化设置</a><br>4.<a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化</a><br>5.<a href="http://eternalzttz.com/hexo-next.html" target="_blank" rel="noopener">hexo next主题优化，打造个人精致网站</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿### 不花一分钱使用Hexo搭建个人博客网站，从无到发表文章及更新教程&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;本文较长,也是楼主呕心沥血参考网上各种教程加上自己踩坑完成的,只希望能对你有所帮助。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;另外文
      
    
    </summary>
    
    
      <category term="technology" scheme="http://wsuo.top/categories/technology/"/>
    
    
      <category term="hexo" scheme="http://wsuo.top/tags/hexo/"/>
    
  </entry>
  
</feed>
